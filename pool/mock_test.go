// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nspcc-dev/neofs-sdk-go/pool (interfaces: Client)

// Package pool is a generated GoMock package.
package pool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	accounting "github.com/nspcc-dev/neofs-sdk-go/accounting"
	container "github.com/nspcc-dev/neofs-sdk-go/container"
	id "github.com/nspcc-dev/neofs-sdk-go/container/id"
	eacl "github.com/nspcc-dev/neofs-sdk-go/eacl"
	netmap "github.com/nspcc-dev/neofs-sdk-go/netmap"
	object "github.com/nspcc-dev/neofs-sdk-go/object"
	id0 "github.com/nspcc-dev/neofs-sdk-go/object/id"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BalanceGet mocks base method.
func (m *MockClient) BalanceGet(arg0 context.Context, arg1 PrmBalanceGet) (*accounting.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceGet", arg0, arg1)
	ret0, _ := ret[0].(*accounting.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceGet indicates an expected call of BalanceGet.
func (mr *MockClientMockRecorder) BalanceGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceGet", reflect.TypeOf((*MockClient)(nil).BalanceGet), arg0, arg1)
}

// ContainerDelete mocks base method.
func (m *MockClient) ContainerDelete(arg0 context.Context, arg1 PrmContainerDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerDelete indicates an expected call of ContainerDelete.
func (mr *MockClientMockRecorder) ContainerDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerDelete", reflect.TypeOf((*MockClient)(nil).ContainerDelete), arg0, arg1)
}

// ContainerEACL mocks base method.
func (m *MockClient) ContainerEACL(arg0 context.Context, arg1 PrmContainerEACL) (*eacl.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerEACL", arg0, arg1)
	ret0, _ := ret[0].(*eacl.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerEACL indicates an expected call of ContainerEACL.
func (mr *MockClientMockRecorder) ContainerEACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerEACL", reflect.TypeOf((*MockClient)(nil).ContainerEACL), arg0, arg1)
}

// ContainerGet mocks base method.
func (m *MockClient) ContainerGet(arg0 context.Context, arg1 PrmContainerGet) (*container.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerGet", arg0, arg1)
	ret0, _ := ret[0].(*container.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerGet indicates an expected call of ContainerGet.
func (mr *MockClientMockRecorder) ContainerGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerGet", reflect.TypeOf((*MockClient)(nil).ContainerGet), arg0, arg1)
}

// ContainerList mocks base method.
func (m *MockClient) ContainerList(arg0 context.Context, arg1 PrmContainerList) ([]id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerList", arg0, arg1)
	ret0, _ := ret[0].([]id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerList indicates an expected call of ContainerList.
func (mr *MockClientMockRecorder) ContainerList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerList", reflect.TypeOf((*MockClient)(nil).ContainerList), arg0, arg1)
}

// ContainerPut mocks base method.
func (m *MockClient) ContainerPut(arg0 context.Context, arg1 PrmContainerPut) (*id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerPut", arg0, arg1)
	ret0, _ := ret[0].(*id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerPut indicates an expected call of ContainerPut.
func (mr *MockClientMockRecorder) ContainerPut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerPut", reflect.TypeOf((*MockClient)(nil).ContainerPut), arg0, arg1)
}

// ContainerSetEACL mocks base method.
func (m *MockClient) ContainerSetEACL(arg0 context.Context, arg1 PrmContainerSetEACL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerSetEACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerSetEACL indicates an expected call of ContainerSetEACL.
func (mr *MockClientMockRecorder) ContainerSetEACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerSetEACL", reflect.TypeOf((*MockClient)(nil).ContainerSetEACL), arg0, arg1)
}

// EndpointInfo mocks base method.
func (m *MockClient) EndpointInfo(arg0 context.Context, arg1 PrmEndpointInfo) (*netmap.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointInfo", arg0, arg1)
	ret0, _ := ret[0].(*netmap.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointInfo indicates an expected call of EndpointInfo.
func (mr *MockClientMockRecorder) EndpointInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointInfo", reflect.TypeOf((*MockClient)(nil).EndpointInfo), arg0, arg1)
}

// NetworkInfo mocks base method.
func (m *MockClient) NetworkInfo(arg0 context.Context, arg1 PrmNetworkInfo) (*netmap.NetworkInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInfo", arg0, arg1)
	ret0, _ := ret[0].(*netmap.NetworkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInfo indicates an expected call of NetworkInfo.
func (mr *MockClientMockRecorder) NetworkInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInfo", reflect.TypeOf((*MockClient)(nil).NetworkInfo), arg0, arg1)
}

// ObjectDelete mocks base method.
func (m *MockClient) ObjectDelete(arg0 context.Context, arg1 PrmObjectDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObjectDelete indicates an expected call of ObjectDelete.
func (mr *MockClientMockRecorder) ObjectDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectDelete", reflect.TypeOf((*MockClient)(nil).ObjectDelete), arg0, arg1)
}

// ObjectGet mocks base method.
func (m *MockClient) ObjectGet(arg0 context.Context, arg1 PrmObjectGet) (*ResGetObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectGet", arg0, arg1)
	ret0, _ := ret[0].(*ResGetObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectGet indicates an expected call of ObjectGet.
func (mr *MockClientMockRecorder) ObjectGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectGet", reflect.TypeOf((*MockClient)(nil).ObjectGet), arg0, arg1)
}

// ObjectHead mocks base method.
func (m *MockClient) ObjectHead(arg0 context.Context, arg1 PrmObjectHead) (*object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectHead", arg0, arg1)
	ret0, _ := ret[0].(*object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectHead indicates an expected call of ObjectHead.
func (mr *MockClientMockRecorder) ObjectHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectHead", reflect.TypeOf((*MockClient)(nil).ObjectHead), arg0, arg1)
}

// ObjectPut mocks base method.
func (m *MockClient) ObjectPut(arg0 context.Context, arg1 PrmObjectPut) (*id0.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectPut", arg0, arg1)
	ret0, _ := ret[0].(*id0.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectPut indicates an expected call of ObjectPut.
func (mr *MockClientMockRecorder) ObjectPut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectPut", reflect.TypeOf((*MockClient)(nil).ObjectPut), arg0, arg1)
}

// ObjectRange mocks base method.
func (m *MockClient) ObjectRange(arg0 context.Context, arg1 PrmObjectRange) (*ResObjectRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectRange", arg0, arg1)
	ret0, _ := ret[0].(*ResObjectRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectRange indicates an expected call of ObjectRange.
func (mr *MockClientMockRecorder) ObjectRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectRange", reflect.TypeOf((*MockClient)(nil).ObjectRange), arg0, arg1)
}

// ObjectSearch mocks base method.
func (m *MockClient) ObjectSearch(arg0 context.Context, arg1 PrmObjectSearch) (*ResObjectSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectSearch", arg0, arg1)
	ret0, _ := ret[0].(*ResObjectSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectSearch indicates an expected call of ObjectSearch.
func (mr *MockClientMockRecorder) ObjectSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectSearch", reflect.TypeOf((*MockClient)(nil).ObjectSearch), arg0, arg1)
}

// SessionCreate mocks base method.
func (m *MockClient) SessionCreate(arg0 context.Context, arg1 PrmCreateSession) (*ResCreateSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionCreate", arg0, arg1)
	ret0, _ := ret[0].(*ResCreateSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCreate indicates an expected call of SessionCreate.
func (mr *MockClientMockRecorder) SessionCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCreate", reflect.TypeOf((*MockClient)(nil).SessionCreate), arg0, arg1)
}
