// Code generated by MockGen. DO NOT EDIT.
// Source: pool.go

// Package pool is a generated GoMock package.
package pool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	accounting "github.com/nspcc-dev/neofs-sdk-go/accounting"
	container "github.com/nspcc-dev/neofs-sdk-go/container"
	id "github.com/nspcc-dev/neofs-sdk-go/container/id"
	eacl "github.com/nspcc-dev/neofs-sdk-go/eacl"
	netmap "github.com/nspcc-dev/neofs-sdk-go/netmap"
	object "github.com/nspcc-dev/neofs-sdk-go/object"
	id0 "github.com/nspcc-dev/neofs-sdk-go/object/id"
)

// MockClient is a mock of client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// balanceGet mocks base method.
func (m *MockClient) balanceGet(arg0 context.Context, arg1 PrmBalanceGet) (*accounting.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "balanceGet", arg0, arg1)
	ret0, _ := ret[0].(*accounting.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// balanceGet indicates an expected call of balanceGet.
func (mr *MockClientMockRecorder) balanceGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "balanceGet", reflect.TypeOf((*MockClient)(nil).balanceGet), arg0, arg1)
}

// containerDelete mocks base method.
func (m *MockClient) containerDelete(arg0 context.Context, arg1 PrmContainerDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "containerDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// containerDelete indicates an expected call of containerDelete.
func (mr *MockClientMockRecorder) containerDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "containerDelete", reflect.TypeOf((*MockClient)(nil).containerDelete), arg0, arg1)
}

// containerEACL mocks base method.
func (m *MockClient) containerEACL(arg0 context.Context, arg1 PrmContainerEACL) (*eacl.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "containerEACL", arg0, arg1)
	ret0, _ := ret[0].(*eacl.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// containerEACL indicates an expected call of containerEACL.
func (mr *MockClientMockRecorder) containerEACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "containerEACL", reflect.TypeOf((*MockClient)(nil).containerEACL), arg0, arg1)
}

// containerGet mocks base method.
func (m *MockClient) containerGet(arg0 context.Context, arg1 PrmContainerGet) (*container.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "containerGet", arg0, arg1)
	ret0, _ := ret[0].(*container.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// containerGet indicates an expected call of containerGet.
func (mr *MockClientMockRecorder) containerGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "containerGet", reflect.TypeOf((*MockClient)(nil).containerGet), arg0, arg1)
}

// containerList mocks base method.
func (m *MockClient) containerList(arg0 context.Context, arg1 PrmContainerList) ([]id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "containerList", arg0, arg1)
	ret0, _ := ret[0].([]id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// containerList indicates an expected call of containerList.
func (mr *MockClientMockRecorder) containerList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "containerList", reflect.TypeOf((*MockClient)(nil).containerList), arg0, arg1)
}

// containerPut mocks base method.
func (m *MockClient) containerPut(arg0 context.Context, arg1 PrmContainerPut) (*id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "containerPut", arg0, arg1)
	ret0, _ := ret[0].(*id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// containerPut indicates an expected call of containerPut.
func (mr *MockClientMockRecorder) containerPut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "containerPut", reflect.TypeOf((*MockClient)(nil).containerPut), arg0, arg1)
}

// containerSetEACL mocks base method.
func (m *MockClient) containerSetEACL(arg0 context.Context, arg1 PrmContainerSetEACL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "containerSetEACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// containerSetEACL indicates an expected call of containerSetEACL.
func (mr *MockClientMockRecorder) containerSetEACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "containerSetEACL", reflect.TypeOf((*MockClient)(nil).containerSetEACL), arg0, arg1)
}

// endpointInfo mocks base method.
func (m *MockClient) endpointInfo(arg0 context.Context, arg1 prmEndpointInfo) (*netmap.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "endpointInfo", arg0, arg1)
	ret0, _ := ret[0].(*netmap.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// endpointInfo indicates an expected call of endpointInfo.
func (mr *MockClientMockRecorder) endpointInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "endpointInfo", reflect.TypeOf((*MockClient)(nil).endpointInfo), arg0, arg1)
}

// networkInfo mocks base method.
func (m *MockClient) networkInfo(arg0 context.Context, arg1 prmNetworkInfo) (*netmap.NetworkInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "networkInfo", arg0, arg1)
	ret0, _ := ret[0].(*netmap.NetworkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// networkInfo indicates an expected call of networkInfo.
func (mr *MockClientMockRecorder) networkInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "networkInfo", reflect.TypeOf((*MockClient)(nil).networkInfo), arg0, arg1)
}

// objectDelete mocks base method.
func (m *MockClient) objectDelete(arg0 context.Context, arg1 PrmObjectDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "objectDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// objectDelete indicates an expected call of objectDelete.
func (mr *MockClientMockRecorder) objectDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "objectDelete", reflect.TypeOf((*MockClient)(nil).objectDelete), arg0, arg1)
}

// objectGet mocks base method.
func (m *MockClient) objectGet(arg0 context.Context, arg1 PrmObjectGet) (*ResGetObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "objectGet", arg0, arg1)
	ret0, _ := ret[0].(*ResGetObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// objectGet indicates an expected call of objectGet.
func (mr *MockClientMockRecorder) objectGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "objectGet", reflect.TypeOf((*MockClient)(nil).objectGet), arg0, arg1)
}

// objectHead mocks base method.
func (m *MockClient) objectHead(arg0 context.Context, arg1 PrmObjectHead) (*object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "objectHead", arg0, arg1)
	ret0, _ := ret[0].(*object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// objectHead indicates an expected call of objectHead.
func (mr *MockClientMockRecorder) objectHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "objectHead", reflect.TypeOf((*MockClient)(nil).objectHead), arg0, arg1)
}

// objectPut mocks base method.
func (m *MockClient) objectPut(arg0 context.Context, arg1 PrmObjectPut) (*id0.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "objectPut", arg0, arg1)
	ret0, _ := ret[0].(*id0.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// objectPut indicates an expected call of objectPut.
func (mr *MockClientMockRecorder) objectPut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "objectPut", reflect.TypeOf((*MockClient)(nil).objectPut), arg0, arg1)
}

// objectRange mocks base method.
func (m *MockClient) objectRange(arg0 context.Context, arg1 PrmObjectRange) (*ResObjectRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "objectRange", arg0, arg1)
	ret0, _ := ret[0].(*ResObjectRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// objectRange indicates an expected call of objectRange.
func (mr *MockClientMockRecorder) objectRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "objectRange", reflect.TypeOf((*MockClient)(nil).objectRange), arg0, arg1)
}

// objectSearch mocks base method.
func (m *MockClient) objectSearch(arg0 context.Context, arg1 PrmObjectSearch) (*ResObjectSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "objectSearch", arg0, arg1)
	ret0, _ := ret[0].(*ResObjectSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// objectSearch indicates an expected call of objectSearch.
func (mr *MockClientMockRecorder) objectSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "objectSearch", reflect.TypeOf((*MockClient)(nil).objectSearch), arg0, arg1)
}

// sessionCreate mocks base method.
func (m *MockClient) sessionCreate(arg0 context.Context, arg1 prmCreateSession) (*resCreateSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sessionCreate", arg0, arg1)
	ret0, _ := ret[0].(*resCreateSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sessionCreate indicates an expected call of sessionCreate.
func (mr *MockClientMockRecorder) sessionCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sessionCreate", reflect.TypeOf((*MockClient)(nil).sessionCreate), arg0, arg1)
}
