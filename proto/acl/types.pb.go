// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/acl/types.proto

package acl

import (
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Target role of the access control rule in access control list.
type Role int32

const (
	// Unspecified  role, default value
	Role_ROLE_UNSPECIFIED Role = 0
	// User target rule is applied if sender is the owner of the container
	Role_USER Role = 1
	// System target rule is applied if sender is a storage node within the
	// container or an inner ring node
	Role_SYSTEM Role = 2
	// Others target rule is applied if sender is neither a user nor a system target
	Role_OTHERS Role = 3
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "USER",
		2: "SYSTEM",
		3: "OTHERS",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"USER":             1,
		"SYSTEM":           2,
		"OTHERS":           3,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_acl_types_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_proto_acl_types_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{0}
}

// MatchType is an enumeration of match types.
type MatchType int32

const (
	// Unspecified match type, default value.
	MatchType_MATCH_TYPE_UNSPECIFIED MatchType = 0
	// Return true if strings are equal
	MatchType_STRING_EQUAL MatchType = 1
	// Return true if strings are different
	MatchType_STRING_NOT_EQUAL MatchType = 2
	// Absence of attribute
	MatchType_NOT_PRESENT MatchType = 3
	// Numeric 'greater than'
	MatchType_NUM_GT MatchType = 4
	// Numeric 'greater or equal than'
	MatchType_NUM_GE MatchType = 5
	// Numeric 'less than'
	MatchType_NUM_LT MatchType = 6
	// Numeric 'less or equal than'
	MatchType_NUM_LE MatchType = 7
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "MATCH_TYPE_UNSPECIFIED",
		1: "STRING_EQUAL",
		2: "STRING_NOT_EQUAL",
		3: "NOT_PRESENT",
		4: "NUM_GT",
		5: "NUM_GE",
		6: "NUM_LT",
		7: "NUM_LE",
	}
	MatchType_value = map[string]int32{
		"MATCH_TYPE_UNSPECIFIED": 0,
		"STRING_EQUAL":           1,
		"STRING_NOT_EQUAL":       2,
		"NOT_PRESENT":            3,
		"NUM_GT":                 4,
		"NUM_GE":                 5,
		"NUM_LT":                 6,
		"NUM_LE":                 7,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_acl_types_proto_enumTypes[1].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_proto_acl_types_proto_enumTypes[1]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{1}
}

// Request's operation type to match if the rule is applicable to a particular
// request.
type Operation int32

const (
	// Unspecified operation, default value
	Operation_OPERATION_UNSPECIFIED Operation = 0
	// Get
	Operation_GET Operation = 1
	// Head
	Operation_HEAD Operation = 2
	// Put
	Operation_PUT Operation = 3
	// Delete
	Operation_DELETE Operation = 4
	// Search
	Operation_SEARCH Operation = 5
	// GetRange
	Operation_GETRANGE Operation = 6
	// GetRangeHash
	Operation_GETRANGEHASH Operation = 7
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "GET",
		2: "HEAD",
		3: "PUT",
		4: "DELETE",
		5: "SEARCH",
		6: "GETRANGE",
		7: "GETRANGEHASH",
	}
	Operation_value = map[string]int32{
		"OPERATION_UNSPECIFIED": 0,
		"GET":                   1,
		"HEAD":                  2,
		"PUT":                   3,
		"DELETE":                4,
		"SEARCH":                5,
		"GETRANGE":              6,
		"GETRANGEHASH":          7,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_acl_types_proto_enumTypes[2].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_proto_acl_types_proto_enumTypes[2]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{2}
}

// Rule execution result action. Either allows or denies access if the rule's
// filters match.
type Action int32

const (
	// Unspecified action, default value
	Action_ACTION_UNSPECIFIED Action = 0
	// Allow action
	Action_ALLOW Action = 1
	// Deny action
	Action_DENY Action = 2
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ALLOW",
		2: "DENY",
	}
	Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ALLOW":              1,
		"DENY":               2,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_acl_types_proto_enumTypes[3].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_proto_acl_types_proto_enumTypes[3]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{3}
}

// Enumeration of possible sources of Headers to apply filters.
type HeaderType int32

const (
	// Unspecified header, default value.
	HeaderType_HEADER_UNSPECIFIED HeaderType = 0
	// Filter request headers
	HeaderType_REQUEST HeaderType = 1
	// Filter object headers
	HeaderType_OBJECT HeaderType = 2
	// Filter service headers. These are not processed by NeoFS nodes and
	// exist for service use only.
	HeaderType_SERVICE HeaderType = 3
)

// Enum value maps for HeaderType.
var (
	HeaderType_name = map[int32]string{
		0: "HEADER_UNSPECIFIED",
		1: "REQUEST",
		2: "OBJECT",
		3: "SERVICE",
	}
	HeaderType_value = map[string]int32{
		"HEADER_UNSPECIFIED": 0,
		"REQUEST":            1,
		"OBJECT":             2,
		"SERVICE":            3,
	}
)

func (x HeaderType) Enum() *HeaderType {
	p := new(HeaderType)
	*p = x
	return p
}

func (x HeaderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_acl_types_proto_enumTypes[4].Descriptor()
}

func (HeaderType) Type() protoreflect.EnumType {
	return &file_proto_acl_types_proto_enumTypes[4]
}

func (x HeaderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderType.Descriptor instead.
func (HeaderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{4}
}

// Describes a single eACL rule.
type EACLRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NeoFS request Verb to match
	Operation Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=neo.fs.v2.acl.Operation" json:"operation,omitempty"`
	// Rule execution result. Either allows or denies access if filters match.
	Action Action `protobuf:"varint,2,opt,name=action,proto3,enum=neo.fs.v2.acl.Action" json:"action,omitempty"`
	// List of filters to match and see if rule is applicable
	Filters []*EACLRecord_Filter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// List of target subjects to apply ACL rule to
	Targets       []*EACLRecord_Target `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EACLRecord) Reset() {
	*x = EACLRecord{}
	mi := &file_proto_acl_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EACLRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EACLRecord) ProtoMessage() {}

func (x *EACLRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_acl_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EACLRecord.ProtoReflect.Descriptor instead.
func (*EACLRecord) Descriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{0}
}

func (x *EACLRecord) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_OPERATION_UNSPECIFIED
}

func (x *EACLRecord) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *EACLRecord) GetFilters() []*EACLRecord_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *EACLRecord) GetTargets() []*EACLRecord_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

// Extended ACL rules table. A list of ACL rules defined additionally to Basic
// ACL. Extended ACL rules can be attached to a container and can be updated
// or may be defined in `BearerToken` structure. Please see the corresponding
// NeoFS Technical Specification section for detailed description.
type EACLTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// eACL format version. Effectively, the version of API library used to create
	// eACL Table.
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Identifier of the container that should use given access control rules
	ContainerId *refs.ContainerID `protobuf:"bytes,2,opt,name=container_id,json=containerID,proto3" json:"container_id,omitempty"`
	// List of Extended ACL rules
	Records       []*EACLRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EACLTable) Reset() {
	*x = EACLTable{}
	mi := &file_proto_acl_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EACLTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EACLTable) ProtoMessage() {}

func (x *EACLTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_acl_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EACLTable.ProtoReflect.Descriptor instead.
func (*EACLTable) Descriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{1}
}

func (x *EACLTable) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *EACLTable) GetContainerId() *refs.ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *EACLTable) GetRecords() []*EACLRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// BearerToken allows to attach signed Extended ACL rules to the request in
// `RequestMetaHeader`. If container's Basic ACL rules allow, the attached rule
// set will be checked instead of one attached to the container itself. Just
// like [JWT](https://jwt.io), it has a limited lifetime and scope, hence can be
// used in the similar use cases, like providing authorisation to externally
// authenticated party.
//
// BearerToken can be issued only by the container's owner and must be signed using
// the key associated with the container's `OwnerID`.
type BearerToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bearer Token body
	Body *BearerToken_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Signature of BearerToken body
	Signature     *refs.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BearerToken) Reset() {
	*x = BearerToken{}
	mi := &file_proto_acl_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BearerToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerToken) ProtoMessage() {}

func (x *BearerToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_acl_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerToken.ProtoReflect.Descriptor instead.
func (*BearerToken) Descriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{2}
}

func (x *BearerToken) GetBody() *BearerToken_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *BearerToken) GetSignature() *refs.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Filter to check particular properties of the request or the object.
//
// The `value` field must be empty if `match_type` is an unary operator
// (e.g. `NOT_PRESENT`). If `match_type` field is numeric (e.g. `NUM_GT`),
// the `value` field must be a base-10 integer.
//
// By default `key` field refers to the corresponding object's `Attribute`.
// Some Object's header fields can also be accessed by adding `$Object:`
// prefix to the name. For such attributes, field 'match_type' must not be
// 'NOT_PRESENT'. Here is the list of fields available via this prefix:
//
//   - $Object:version \
//     version
//   - $Object:objectID \
//     object_id
//   - $Object:containerID \
//     container_id
//   - $Object:ownerID \
//     owner_id
//   - $Object:creationEpoch \
//     creation_epoch
//   - $Object:payloadLength \
//     payload_length
//   - $Object:payloadHash \
//     payload_hash
//   - $Object:objectType \
//     object_type
//   - $Object:homomorphicHash \
//     homomorphic_hash
//
// Numeric `match_type` field can only be used with `$Object:creationEpoch`
// and `$Object:payloadLength` system attributes.
//
// Please note, that if request or response does not have object's headers of
// full object (Range, RangeHash, Search, Delete), it will not be possible to
// filter by object header fields or user attributes. From the well-known list
// only `$Object:objectID` and `$Object:containerID` will be available, as
// it's possible to take that information from the requested address.
type EACLRecord_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Define if Object or Request header will be used
	HeaderType HeaderType `protobuf:"varint,1,opt,name=header_type,json=headerType,proto3,enum=neo.fs.v2.acl.HeaderType" json:"header_type,omitempty"`
	// Match operation type
	MatchType MatchType `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=neo.fs.v2.acl.MatchType" json:"match_type,omitempty"`
	// Name of the Header to use
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Expected Header Value or pattern to match
	Value         string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EACLRecord_Filter) Reset() {
	*x = EACLRecord_Filter{}
	mi := &file_proto_acl_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EACLRecord_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EACLRecord_Filter) ProtoMessage() {}

func (x *EACLRecord_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_acl_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EACLRecord_Filter.ProtoReflect.Descriptor instead.
func (*EACLRecord_Filter) Descriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EACLRecord_Filter) GetHeaderType() HeaderType {
	if x != nil {
		return x.HeaderType
	}
	return HeaderType_HEADER_UNSPECIFIED
}

func (x *EACLRecord_Filter) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_UNSPECIFIED
}

func (x *EACLRecord_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EACLRecord_Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Target to apply ACL rule. Can be a subject's role class or a list of public
// keys to match.
type EACLRecord_Target struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target subject's role class
	Role Role `protobuf:"varint,1,opt,name=role,proto3,enum=neo.fs.v2.acl.Role" json:"role,omitempty"`
	// List of 25-byte accounts to identify target subjects.
	// 33-byte public keys are also supported, however, they are deprecated and script hashes should be derived from them.
	Keys          [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EACLRecord_Target) Reset() {
	*x = EACLRecord_Target{}
	mi := &file_proto_acl_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EACLRecord_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EACLRecord_Target) ProtoMessage() {}

func (x *EACLRecord_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_acl_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EACLRecord_Target.ProtoReflect.Descriptor instead.
func (*EACLRecord_Target) Descriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EACLRecord_Target) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *EACLRecord_Target) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Bearer Token body structure contains Extended ACL table issued by the container
// owner with additional information preventing token abuse.
type BearerToken_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table of Extended ACL rules to use instead of the ones attached to the
	// container. If it contains `container_id` field, bearer token is only
	// valid for this specific container. Otherwise, any container of the same owner
	// is allowed.
	EaclTable *EACLTable `protobuf:"bytes,1,opt,name=eacl_table,json=eaclTable,proto3" json:"eacl_table,omitempty"`
	// `OwnerID` defines to whom the token was issued. It must match the request
	// originator's `OwnerID`. If empty, any token bearer will be accepted.
	OwnerId *refs.OwnerID `protobuf:"bytes,2,opt,name=owner_id,json=ownerID,proto3" json:"owner_id,omitempty"`
	// Token expiration and valid time period parameters
	Lifetime *BearerToken_Body_TokenLifetime `protobuf:"bytes,3,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// Token issuer's user ID in NeoFS. It must equal to the related
	// container's owner.
	Issuer        *refs.OwnerID `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BearerToken_Body) Reset() {
	*x = BearerToken_Body{}
	mi := &file_proto_acl_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BearerToken_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerToken_Body) ProtoMessage() {}

func (x *BearerToken_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_acl_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerToken_Body.ProtoReflect.Descriptor instead.
func (*BearerToken_Body) Descriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BearerToken_Body) GetEaclTable() *EACLTable {
	if x != nil {
		return x.EaclTable
	}
	return nil
}

func (x *BearerToken_Body) GetOwnerId() *refs.OwnerID {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *BearerToken_Body) GetLifetime() *BearerToken_Body_TokenLifetime {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *BearerToken_Body) GetIssuer() *refs.OwnerID {
	if x != nil {
		return x.Issuer
	}
	return nil
}

// Lifetime parameters of the token. Field names taken from
// [rfc7519](https://tools.ietf.org/html/rfc7519).
type BearerToken_Body_TokenLifetime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Expiration epoch, the last epoch when token is valid.
	Exp uint64 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	// Not valid before epoch, the first epoch when token is valid.
	Nbf uint64 `protobuf:"varint,2,opt,name=nbf,proto3" json:"nbf,omitempty"`
	// Issued at Epoch
	Iat           uint64 `protobuf:"varint,3,opt,name=iat,proto3" json:"iat,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BearerToken_Body_TokenLifetime) Reset() {
	*x = BearerToken_Body_TokenLifetime{}
	mi := &file_proto_acl_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BearerToken_Body_TokenLifetime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerToken_Body_TokenLifetime) ProtoMessage() {}

func (x *BearerToken_Body_TokenLifetime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_acl_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerToken_Body_TokenLifetime.ProtoReflect.Descriptor instead.
func (*BearerToken_Body_TokenLifetime) Descriptor() ([]byte, []int) {
	return file_proto_acl_types_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *BearerToken_Body_TokenLifetime) GetExp() uint64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *BearerToken_Body_TokenLifetime) GetNbf() uint64 {
	if x != nil {
		return x.Nbf
	}
	return 0
}

func (x *BearerToken_Body_TokenLifetime) GetIat() uint64 {
	if x != nil {
		return x.Iat
	}
	return 0
}

var File_proto_acl_types_proto protoreflect.FileDescriptor

const file_proto_acl_types_proto_rawDesc = "" +
	"\n" +
	"\x15proto/acl/types.proto\x12\rneo.fs.v2.acl\x1a\x16proto/refs/types.proto\"\xda\x03\n" +
	"\n" +
	"EACLRecord\x126\n" +
	"\toperation\x18\x01 \x01(\x0e2\x18.neo.fs.v2.acl.OperationR\toperation\x12-\n" +
	"\x06action\x18\x02 \x01(\x0e2\x15.neo.fs.v2.acl.ActionR\x06action\x12:\n" +
	"\afilters\x18\x03 \x03(\v2 .neo.fs.v2.acl.EACLRecord.FilterR\afilters\x12:\n" +
	"\atargets\x18\x04 \x03(\v2 .neo.fs.v2.acl.EACLRecord.TargetR\atargets\x1a\xa5\x01\n" +
	"\x06Filter\x12:\n" +
	"\vheader_type\x18\x01 \x01(\x0e2\x19.neo.fs.v2.acl.HeaderTypeR\n" +
	"headerType\x127\n" +
	"\n" +
	"match_type\x18\x02 \x01(\x0e2\x18.neo.fs.v2.acl.MatchTypeR\tmatchType\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x04 \x01(\tR\x05value\x1aE\n" +
	"\x06Target\x12'\n" +
	"\x04role\x18\x01 \x01(\x0e2\x13.neo.fs.v2.acl.RoleR\x04role\x12\x12\n" +
	"\x04keys\x18\x02 \x03(\fR\x04keys\"\xb3\x01\n" +
	"\tEACLTable\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x12>\n" +
	"\fcontainer_id\x18\x02 \x01(\v2\x1b.neo.fs.v2.refs.ContainerIDR\vcontainerID\x123\n" +
	"\arecords\x18\x03 \x03(\v2\x19.neo.fs.v2.acl.EACLRecordR\arecords\"\xb4\x03\n" +
	"\vBearerToken\x123\n" +
	"\x04body\x18\x01 \x01(\v2\x1f.neo.fs.v2.acl.BearerToken.BodyR\x04body\x127\n" +
	"\tsignature\x18\x02 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\tsignature\x1a\xb6\x02\n" +
	"\x04Body\x127\n" +
	"\n" +
	"eacl_table\x18\x01 \x01(\v2\x18.neo.fs.v2.acl.EACLTableR\teaclTable\x122\n" +
	"\bowner_id\x18\x02 \x01(\v2\x17.neo.fs.v2.refs.OwnerIDR\aownerID\x12I\n" +
	"\blifetime\x18\x03 \x01(\v2-.neo.fs.v2.acl.BearerToken.Body.TokenLifetimeR\blifetime\x12/\n" +
	"\x06issuer\x18\x04 \x01(\v2\x17.neo.fs.v2.refs.OwnerIDR\x06issuer\x1aE\n" +
	"\rTokenLifetime\x12\x10\n" +
	"\x03exp\x18\x01 \x01(\x04R\x03exp\x12\x10\n" +
	"\x03nbf\x18\x02 \x01(\x04R\x03nbf\x12\x10\n" +
	"\x03iat\x18\x03 \x01(\x04R\x03iat*>\n" +
	"\x04Role\x12\x14\n" +
	"\x10ROLE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04USER\x10\x01\x12\n" +
	"\n" +
	"\x06SYSTEM\x10\x02\x12\n" +
	"\n" +
	"\x06OTHERS\x10\x03*\x90\x01\n" +
	"\tMatchType\x12\x1a\n" +
	"\x16MATCH_TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fSTRING_EQUAL\x10\x01\x12\x14\n" +
	"\x10STRING_NOT_EQUAL\x10\x02\x12\x0f\n" +
	"\vNOT_PRESENT\x10\x03\x12\n" +
	"\n" +
	"\x06NUM_GT\x10\x04\x12\n" +
	"\n" +
	"\x06NUM_GE\x10\x05\x12\n" +
	"\n" +
	"\x06NUM_LT\x10\x06\x12\n" +
	"\n" +
	"\x06NUM_LE\x10\a*z\n" +
	"\tOperation\x12\x19\n" +
	"\x15OPERATION_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03GET\x10\x01\x12\b\n" +
	"\x04HEAD\x10\x02\x12\a\n" +
	"\x03PUT\x10\x03\x12\n" +
	"\n" +
	"\x06DELETE\x10\x04\x12\n" +
	"\n" +
	"\x06SEARCH\x10\x05\x12\f\n" +
	"\bGETRANGE\x10\x06\x12\x10\n" +
	"\fGETRANGEHASH\x10\a*5\n" +
	"\x06Action\x12\x16\n" +
	"\x12ACTION_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05ALLOW\x10\x01\x12\b\n" +
	"\x04DENY\x10\x02*J\n" +
	"\n" +
	"HeaderType\x12\x16\n" +
	"\x12HEADER_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aREQUEST\x10\x01\x12\n" +
	"\n" +
	"\x06OBJECT\x10\x02\x12\v\n" +
	"\aSERVICE\x10\x03BGZ+github.com/nspcc-dev/neofs-sdk-go/proto/acl\xaa\x02\x17Neo.FileStorage.API.Aclb\x06proto3"

var (
	file_proto_acl_types_proto_rawDescOnce sync.Once
	file_proto_acl_types_proto_rawDescData []byte
)

func file_proto_acl_types_proto_rawDescGZIP() []byte {
	file_proto_acl_types_proto_rawDescOnce.Do(func() {
		file_proto_acl_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_acl_types_proto_rawDesc), len(file_proto_acl_types_proto_rawDesc)))
	})
	return file_proto_acl_types_proto_rawDescData
}

var file_proto_acl_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_acl_types_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_acl_types_proto_goTypes = []any{
	(Role)(0),                              // 0: neo.fs.v2.acl.Role
	(MatchType)(0),                         // 1: neo.fs.v2.acl.MatchType
	(Operation)(0),                         // 2: neo.fs.v2.acl.Operation
	(Action)(0),                            // 3: neo.fs.v2.acl.Action
	(HeaderType)(0),                        // 4: neo.fs.v2.acl.HeaderType
	(*EACLRecord)(nil),                     // 5: neo.fs.v2.acl.EACLRecord
	(*EACLTable)(nil),                      // 6: neo.fs.v2.acl.EACLTable
	(*BearerToken)(nil),                    // 7: neo.fs.v2.acl.BearerToken
	(*EACLRecord_Filter)(nil),              // 8: neo.fs.v2.acl.EACLRecord.Filter
	(*EACLRecord_Target)(nil),              // 9: neo.fs.v2.acl.EACLRecord.Target
	(*BearerToken_Body)(nil),               // 10: neo.fs.v2.acl.BearerToken.Body
	(*BearerToken_Body_TokenLifetime)(nil), // 11: neo.fs.v2.acl.BearerToken.Body.TokenLifetime
	(*refs.Version)(nil),                   // 12: neo.fs.v2.refs.Version
	(*refs.ContainerID)(nil),               // 13: neo.fs.v2.refs.ContainerID
	(*refs.Signature)(nil),                 // 14: neo.fs.v2.refs.Signature
	(*refs.OwnerID)(nil),                   // 15: neo.fs.v2.refs.OwnerID
}
var file_proto_acl_types_proto_depIdxs = []int32{
	2,  // 0: neo.fs.v2.acl.EACLRecord.operation:type_name -> neo.fs.v2.acl.Operation
	3,  // 1: neo.fs.v2.acl.EACLRecord.action:type_name -> neo.fs.v2.acl.Action
	8,  // 2: neo.fs.v2.acl.EACLRecord.filters:type_name -> neo.fs.v2.acl.EACLRecord.Filter
	9,  // 3: neo.fs.v2.acl.EACLRecord.targets:type_name -> neo.fs.v2.acl.EACLRecord.Target
	12, // 4: neo.fs.v2.acl.EACLTable.version:type_name -> neo.fs.v2.refs.Version
	13, // 5: neo.fs.v2.acl.EACLTable.container_id:type_name -> neo.fs.v2.refs.ContainerID
	5,  // 6: neo.fs.v2.acl.EACLTable.records:type_name -> neo.fs.v2.acl.EACLRecord
	10, // 7: neo.fs.v2.acl.BearerToken.body:type_name -> neo.fs.v2.acl.BearerToken.Body
	14, // 8: neo.fs.v2.acl.BearerToken.signature:type_name -> neo.fs.v2.refs.Signature
	4,  // 9: neo.fs.v2.acl.EACLRecord.Filter.header_type:type_name -> neo.fs.v2.acl.HeaderType
	1,  // 10: neo.fs.v2.acl.EACLRecord.Filter.match_type:type_name -> neo.fs.v2.acl.MatchType
	0,  // 11: neo.fs.v2.acl.EACLRecord.Target.role:type_name -> neo.fs.v2.acl.Role
	6,  // 12: neo.fs.v2.acl.BearerToken.Body.eacl_table:type_name -> neo.fs.v2.acl.EACLTable
	15, // 13: neo.fs.v2.acl.BearerToken.Body.owner_id:type_name -> neo.fs.v2.refs.OwnerID
	11, // 14: neo.fs.v2.acl.BearerToken.Body.lifetime:type_name -> neo.fs.v2.acl.BearerToken.Body.TokenLifetime
	15, // 15: neo.fs.v2.acl.BearerToken.Body.issuer:type_name -> neo.fs.v2.refs.OwnerID
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_acl_types_proto_init() }
func file_proto_acl_types_proto_init() {
	if File_proto_acl_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_acl_types_proto_rawDesc), len(file_proto_acl_types_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_acl_types_proto_goTypes,
		DependencyIndexes: file_proto_acl_types_proto_depIdxs,
		EnumInfos:         file_proto_acl_types_proto_enumTypes,
		MessageInfos:      file_proto_acl_types_proto_msgTypes,
	}.Build()
	File_proto_acl_types_proto = out.File
	file_proto_acl_types_proto_goTypes = nil
	file_proto_acl_types_proto_depIdxs = nil
}
