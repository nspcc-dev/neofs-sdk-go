// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/netmap/service.proto

package netmap

import (
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	session "github.com/nspcc-dev/neofs-sdk-go/proto/session"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Get NodeInfo structure directly from a particular node
type LocalNodeInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Body of the LocalNodeInfo request message
	Body *LocalNodeInfoRequest_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Carries request meta information. Header data is used only to regulate
	// message transport and does not affect request execution.
	MetaHeader *session.RequestMetaHeader `protobuf:"bytes,2,opt,name=meta_header,json=metaHeader,proto3" json:"meta_header,omitempty"`
	// Carries request verification information. This header is used to
	// authenticate the nodes of the message route and check the correctness of
	// transmission.
	VerifyHeader  *session.RequestVerificationHeader `protobuf:"bytes,3,opt,name=verify_header,json=verifyHeader,proto3" json:"verify_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalNodeInfoRequest) Reset() {
	*x = LocalNodeInfoRequest{}
	mi := &file_proto_netmap_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalNodeInfoRequest) ProtoMessage() {}

func (x *LocalNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*LocalNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{0}
}

func (x *LocalNodeInfoRequest) GetBody() *LocalNodeInfoRequest_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *LocalNodeInfoRequest) GetMetaHeader() *session.RequestMetaHeader {
	if x != nil {
		return x.MetaHeader
	}
	return nil
}

func (x *LocalNodeInfoRequest) GetVerifyHeader() *session.RequestVerificationHeader {
	if x != nil {
		return x.VerifyHeader
	}
	return nil
}

// Local Node Info, including API Version in use
type LocalNodeInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Body of the balance response message.
	Body *LocalNodeInfoResponse_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Carries response meta information. Header data is used only to regulate
	// message transport and does not affect response execution.
	MetaHeader *session.ResponseMetaHeader `protobuf:"bytes,2,opt,name=meta_header,json=metaHeader,proto3" json:"meta_header,omitempty"`
	// Carries response verification information. This header is used to
	// authenticate the nodes of the message route and check the correctness of
	// transmission.
	VerifyHeader  *session.ResponseVerificationHeader `protobuf:"bytes,3,opt,name=verify_header,json=verifyHeader,proto3" json:"verify_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalNodeInfoResponse) Reset() {
	*x = LocalNodeInfoResponse{}
	mi := &file_proto_netmap_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalNodeInfoResponse) ProtoMessage() {}

func (x *LocalNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*LocalNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{1}
}

func (x *LocalNodeInfoResponse) GetBody() *LocalNodeInfoResponse_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *LocalNodeInfoResponse) GetMetaHeader() *session.ResponseMetaHeader {
	if x != nil {
		return x.MetaHeader
	}
	return nil
}

func (x *LocalNodeInfoResponse) GetVerifyHeader() *session.ResponseVerificationHeader {
	if x != nil {
		return x.VerifyHeader
	}
	return nil
}

// Get NetworkInfo structure with the network view from a particular node.
type NetworkInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Body of the NetworkInfo request message
	Body *NetworkInfoRequest_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Carries request meta information. Header data is used only to regulate
	// message transport and does not affect request execution.
	MetaHeader *session.RequestMetaHeader `protobuf:"bytes,2,opt,name=meta_header,json=metaHeader,proto3" json:"meta_header,omitempty"`
	// Carries request verification information. This header is used to
	// authenticate the nodes of the message route and check the correctness of
	// transmission.
	VerifyHeader  *session.RequestVerificationHeader `protobuf:"bytes,3,opt,name=verify_header,json=verifyHeader,proto3" json:"verify_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInfoRequest) Reset() {
	*x = NetworkInfoRequest{}
	mi := &file_proto_netmap_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfoRequest) ProtoMessage() {}

func (x *NetworkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfoRequest.ProtoReflect.Descriptor instead.
func (*NetworkInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkInfoRequest) GetBody() *NetworkInfoRequest_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *NetworkInfoRequest) GetMetaHeader() *session.RequestMetaHeader {
	if x != nil {
		return x.MetaHeader
	}
	return nil
}

func (x *NetworkInfoRequest) GetVerifyHeader() *session.RequestVerificationHeader {
	if x != nil {
		return x.VerifyHeader
	}
	return nil
}

// Response with NetworkInfo structure including current epoch and
// FS chain magic number.
type NetworkInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Body of the NetworkInfo response message.
	Body *NetworkInfoResponse_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Carries response meta information. Header data is used only to regulate
	// message transport and does not affect response execution.
	MetaHeader *session.ResponseMetaHeader `protobuf:"bytes,2,opt,name=meta_header,json=metaHeader,proto3" json:"meta_header,omitempty"`
	// Carries response verification information. This header is used to
	// authenticate the nodes of the message route and check the correctness of
	// transmission.
	VerifyHeader  *session.ResponseVerificationHeader `protobuf:"bytes,3,opt,name=verify_header,json=verifyHeader,proto3" json:"verify_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInfoResponse) Reset() {
	*x = NetworkInfoResponse{}
	mi := &file_proto_netmap_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfoResponse) ProtoMessage() {}

func (x *NetworkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfoResponse.ProtoReflect.Descriptor instead.
func (*NetworkInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkInfoResponse) GetBody() *NetworkInfoResponse_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *NetworkInfoResponse) GetMetaHeader() *session.ResponseMetaHeader {
	if x != nil {
		return x.MetaHeader
	}
	return nil
}

func (x *NetworkInfoResponse) GetVerifyHeader() *session.ResponseVerificationHeader {
	if x != nil {
		return x.VerifyHeader
	}
	return nil
}

// Get netmap snapshot request
type NetmapSnapshotRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Body of get netmap snapshot request message.
	Body *NetmapSnapshotRequest_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Carries request meta information. Header data is used only to regulate
	// message transport and does not affect request execution.
	MetaHeader *session.RequestMetaHeader `protobuf:"bytes,2,opt,name=meta_header,json=metaHeader,proto3" json:"meta_header,omitempty"`
	// Carries request verification information. This header is used to
	// authenticate the nodes of the message route and check the correctness of
	// transmission.
	VerifyHeader  *session.RequestVerificationHeader `protobuf:"bytes,3,opt,name=verify_header,json=verifyHeader,proto3" json:"verify_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetmapSnapshotRequest) Reset() {
	*x = NetmapSnapshotRequest{}
	mi := &file_proto_netmap_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetmapSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetmapSnapshotRequest) ProtoMessage() {}

func (x *NetmapSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetmapSnapshotRequest.ProtoReflect.Descriptor instead.
func (*NetmapSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{4}
}

func (x *NetmapSnapshotRequest) GetBody() *NetmapSnapshotRequest_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *NetmapSnapshotRequest) GetMetaHeader() *session.RequestMetaHeader {
	if x != nil {
		return x.MetaHeader
	}
	return nil
}

func (x *NetmapSnapshotRequest) GetVerifyHeader() *session.RequestVerificationHeader {
	if x != nil {
		return x.VerifyHeader
	}
	return nil
}

// Response with current netmap snapshot
type NetmapSnapshotResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Body of get netmap snapshot response message.
	Body *NetmapSnapshotResponse_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Carries response meta information. Header data is used only to regulate
	// message transport and does not affect response execution.
	MetaHeader *session.ResponseMetaHeader `protobuf:"bytes,2,opt,name=meta_header,json=metaHeader,proto3" json:"meta_header,omitempty"`
	// Carries response verification information. This header is used to
	// authenticate the nodes of the message route and check the correctness of
	// transmission.
	VerifyHeader  *session.ResponseVerificationHeader `protobuf:"bytes,3,opt,name=verify_header,json=verifyHeader,proto3" json:"verify_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetmapSnapshotResponse) Reset() {
	*x = NetmapSnapshotResponse{}
	mi := &file_proto_netmap_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetmapSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetmapSnapshotResponse) ProtoMessage() {}

func (x *NetmapSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetmapSnapshotResponse.ProtoReflect.Descriptor instead.
func (*NetmapSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{5}
}

func (x *NetmapSnapshotResponse) GetBody() *NetmapSnapshotResponse_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *NetmapSnapshotResponse) GetMetaHeader() *session.ResponseMetaHeader {
	if x != nil {
		return x.MetaHeader
	}
	return nil
}

func (x *NetmapSnapshotResponse) GetVerifyHeader() *session.ResponseVerificationHeader {
	if x != nil {
		return x.VerifyHeader
	}
	return nil
}

// LocalNodeInfo request body is empty.
type LocalNodeInfoRequest_Body struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalNodeInfoRequest_Body) Reset() {
	*x = LocalNodeInfoRequest_Body{}
	mi := &file_proto_netmap_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalNodeInfoRequest_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalNodeInfoRequest_Body) ProtoMessage() {}

func (x *LocalNodeInfoRequest_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalNodeInfoRequest_Body.ProtoReflect.Descriptor instead.
func (*LocalNodeInfoRequest_Body) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{0, 0}
}

// Local Node Info, including API Version in use.
type LocalNodeInfoResponse_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Latest NeoFS API version in use
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// NodeInfo structure with recent information from node itself
	NodeInfo      *NodeInfo `protobuf:"bytes,2,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalNodeInfoResponse_Body) Reset() {
	*x = LocalNodeInfoResponse_Body{}
	mi := &file_proto_netmap_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalNodeInfoResponse_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalNodeInfoResponse_Body) ProtoMessage() {}

func (x *LocalNodeInfoResponse_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalNodeInfoResponse_Body.ProtoReflect.Descriptor instead.
func (*LocalNodeInfoResponse_Body) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *LocalNodeInfoResponse_Body) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *LocalNodeInfoResponse_Body) GetNodeInfo() *NodeInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

// NetworkInfo request body is empty.
type NetworkInfoRequest_Body struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInfoRequest_Body) Reset() {
	*x = NetworkInfoRequest_Body{}
	mi := &file_proto_netmap_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInfoRequest_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfoRequest_Body) ProtoMessage() {}

func (x *NetworkInfoRequest_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfoRequest_Body.ProtoReflect.Descriptor instead.
func (*NetworkInfoRequest_Body) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{2, 0}
}

// Information about the network.
type NetworkInfoResponse_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NetworkInfo structure with recent information.
	NetworkInfo   *NetworkInfo `protobuf:"bytes,1,opt,name=network_info,json=networkInfo,proto3" json:"network_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInfoResponse_Body) Reset() {
	*x = NetworkInfoResponse_Body{}
	mi := &file_proto_netmap_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInfoResponse_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfoResponse_Body) ProtoMessage() {}

func (x *NetworkInfoResponse_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfoResponse_Body.ProtoReflect.Descriptor instead.
func (*NetworkInfoResponse_Body) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *NetworkInfoResponse_Body) GetNetworkInfo() *NetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

// Get netmap snapshot request body.
type NetmapSnapshotRequest_Body struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetmapSnapshotRequest_Body) Reset() {
	*x = NetmapSnapshotRequest_Body{}
	mi := &file_proto_netmap_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetmapSnapshotRequest_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetmapSnapshotRequest_Body) ProtoMessage() {}

func (x *NetmapSnapshotRequest_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetmapSnapshotRequest_Body.ProtoReflect.Descriptor instead.
func (*NetmapSnapshotRequest_Body) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{4, 0}
}

// Get netmap snapshot response body
type NetmapSnapshotResponse_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Structure of the requested network map.
	Netmap        *Netmap `protobuf:"bytes,1,opt,name=netmap,proto3" json:"netmap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetmapSnapshotResponse_Body) Reset() {
	*x = NetmapSnapshotResponse_Body{}
	mi := &file_proto_netmap_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetmapSnapshotResponse_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetmapSnapshotResponse_Body) ProtoMessage() {}

func (x *NetmapSnapshotResponse_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_netmap_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetmapSnapshotResponse_Body.ProtoReflect.Descriptor instead.
func (*NetmapSnapshotResponse_Body) Descriptor() ([]byte, []int) {
	return file_proto_netmap_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *NetmapSnapshotResponse_Body) GetNetmap() *Netmap {
	if x != nil {
		return x.Netmap
	}
	return nil
}

var File_proto_netmap_service_proto protoreflect.FileDescriptor

const file_proto_netmap_service_proto_rawDesc = "" +
	"\n" +
	"\x1aproto/netmap/service.proto\x12\x10neo.fs.v2.netmap\x1a\x18proto/netmap/types.proto\x1a\x16proto/refs/types.proto\x1a\x19proto/session/types.proto\"\xf9\x01\n" +
	"\x14LocalNodeInfoRequest\x12?\n" +
	"\x04body\x18\x01 \x01(\v2+.neo.fs.v2.netmap.LocalNodeInfoRequest.BodyR\x04body\x12E\n" +
	"\vmeta_header\x18\x02 \x01(\v2$.neo.fs.v2.session.RequestMetaHeaderR\n" +
	"metaHeader\x12Q\n" +
	"\rverify_header\x18\x03 \x01(\v2,.neo.fs.v2.session.RequestVerificationHeaderR\fverifyHeader\x1a\x06\n" +
	"\x04Body\"\xe9\x02\n" +
	"\x15LocalNodeInfoResponse\x12@\n" +
	"\x04body\x18\x01 \x01(\v2,.neo.fs.v2.netmap.LocalNodeInfoResponse.BodyR\x04body\x12F\n" +
	"\vmeta_header\x18\x02 \x01(\v2%.neo.fs.v2.session.ResponseMetaHeaderR\n" +
	"metaHeader\x12R\n" +
	"\rverify_header\x18\x03 \x01(\v2-.neo.fs.v2.session.ResponseVerificationHeaderR\fverifyHeader\x1ar\n" +
	"\x04Body\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x127\n" +
	"\tnode_info\x18\x02 \x01(\v2\x1a.neo.fs.v2.netmap.NodeInfoR\bnodeInfo\"\xf5\x01\n" +
	"\x12NetworkInfoRequest\x12=\n" +
	"\x04body\x18\x01 \x01(\v2).neo.fs.v2.netmap.NetworkInfoRequest.BodyR\x04body\x12E\n" +
	"\vmeta_header\x18\x02 \x01(\v2$.neo.fs.v2.session.RequestMetaHeaderR\n" +
	"metaHeader\x12Q\n" +
	"\rverify_header\x18\x03 \x01(\v2,.neo.fs.v2.session.RequestVerificationHeaderR\fverifyHeader\x1a\x06\n" +
	"\x04Body\"\xbb\x02\n" +
	"\x13NetworkInfoResponse\x12>\n" +
	"\x04body\x18\x01 \x01(\v2*.neo.fs.v2.netmap.NetworkInfoResponse.BodyR\x04body\x12F\n" +
	"\vmeta_header\x18\x02 \x01(\v2%.neo.fs.v2.session.ResponseMetaHeaderR\n" +
	"metaHeader\x12R\n" +
	"\rverify_header\x18\x03 \x01(\v2-.neo.fs.v2.session.ResponseVerificationHeaderR\fverifyHeader\x1aH\n" +
	"\x04Body\x12@\n" +
	"\fnetwork_info\x18\x01 \x01(\v2\x1d.neo.fs.v2.netmap.NetworkInfoR\vnetworkInfo\"\xfb\x01\n" +
	"\x15NetmapSnapshotRequest\x12@\n" +
	"\x04body\x18\x01 \x01(\v2,.neo.fs.v2.netmap.NetmapSnapshotRequest.BodyR\x04body\x12E\n" +
	"\vmeta_header\x18\x02 \x01(\v2$.neo.fs.v2.session.RequestMetaHeaderR\n" +
	"metaHeader\x12Q\n" +
	"\rverify_header\x18\x03 \x01(\v2,.neo.fs.v2.session.RequestVerificationHeaderR\fverifyHeader\x1a\x06\n" +
	"\x04Body\"\xb1\x02\n" +
	"\x16NetmapSnapshotResponse\x12A\n" +
	"\x04body\x18\x01 \x01(\v2-.neo.fs.v2.netmap.NetmapSnapshotResponse.BodyR\x04body\x12F\n" +
	"\vmeta_header\x18\x02 \x01(\v2%.neo.fs.v2.session.ResponseMetaHeaderR\n" +
	"metaHeader\x12R\n" +
	"\rverify_header\x18\x03 \x01(\v2-.neo.fs.v2.session.ResponseVerificationHeaderR\fverifyHeader\x1a8\n" +
	"\x04Body\x120\n" +
	"\x06netmap\x18\x01 \x01(\v2\x18.neo.fs.v2.netmap.NetmapR\x06netmap2\xb2\x02\n" +
	"\rNetmapService\x12`\n" +
	"\rLocalNodeInfo\x12&.neo.fs.v2.netmap.LocalNodeInfoRequest\x1a'.neo.fs.v2.netmap.LocalNodeInfoResponse\x12Z\n" +
	"\vNetworkInfo\x12$.neo.fs.v2.netmap.NetworkInfoRequest\x1a%.neo.fs.v2.netmap.NetworkInfoResponse\x12c\n" +
	"\x0eNetmapSnapshot\x12'.neo.fs.v2.netmap.NetmapSnapshotRequest\x1a(.neo.fs.v2.netmap.NetmapSnapshotResponseBMZ.github.com/nspcc-dev/neofs-sdk-go/proto/netmap\xaa\x02\x1aNeo.FileStorage.API.Netmapb\x06proto3"

var (
	file_proto_netmap_service_proto_rawDescOnce sync.Once
	file_proto_netmap_service_proto_rawDescData []byte
)

func file_proto_netmap_service_proto_rawDescGZIP() []byte {
	file_proto_netmap_service_proto_rawDescOnce.Do(func() {
		file_proto_netmap_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_netmap_service_proto_rawDesc), len(file_proto_netmap_service_proto_rawDesc)))
	})
	return file_proto_netmap_service_proto_rawDescData
}

var file_proto_netmap_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_netmap_service_proto_goTypes = []any{
	(*LocalNodeInfoRequest)(nil),               // 0: neo.fs.v2.netmap.LocalNodeInfoRequest
	(*LocalNodeInfoResponse)(nil),              // 1: neo.fs.v2.netmap.LocalNodeInfoResponse
	(*NetworkInfoRequest)(nil),                 // 2: neo.fs.v2.netmap.NetworkInfoRequest
	(*NetworkInfoResponse)(nil),                // 3: neo.fs.v2.netmap.NetworkInfoResponse
	(*NetmapSnapshotRequest)(nil),              // 4: neo.fs.v2.netmap.NetmapSnapshotRequest
	(*NetmapSnapshotResponse)(nil),             // 5: neo.fs.v2.netmap.NetmapSnapshotResponse
	(*LocalNodeInfoRequest_Body)(nil),          // 6: neo.fs.v2.netmap.LocalNodeInfoRequest.Body
	(*LocalNodeInfoResponse_Body)(nil),         // 7: neo.fs.v2.netmap.LocalNodeInfoResponse.Body
	(*NetworkInfoRequest_Body)(nil),            // 8: neo.fs.v2.netmap.NetworkInfoRequest.Body
	(*NetworkInfoResponse_Body)(nil),           // 9: neo.fs.v2.netmap.NetworkInfoResponse.Body
	(*NetmapSnapshotRequest_Body)(nil),         // 10: neo.fs.v2.netmap.NetmapSnapshotRequest.Body
	(*NetmapSnapshotResponse_Body)(nil),        // 11: neo.fs.v2.netmap.NetmapSnapshotResponse.Body
	(*session.RequestMetaHeader)(nil),          // 12: neo.fs.v2.session.RequestMetaHeader
	(*session.RequestVerificationHeader)(nil),  // 13: neo.fs.v2.session.RequestVerificationHeader
	(*session.ResponseMetaHeader)(nil),         // 14: neo.fs.v2.session.ResponseMetaHeader
	(*session.ResponseVerificationHeader)(nil), // 15: neo.fs.v2.session.ResponseVerificationHeader
	(*refs.Version)(nil),                       // 16: neo.fs.v2.refs.Version
	(*NodeInfo)(nil),                           // 17: neo.fs.v2.netmap.NodeInfo
	(*NetworkInfo)(nil),                        // 18: neo.fs.v2.netmap.NetworkInfo
	(*Netmap)(nil),                             // 19: neo.fs.v2.netmap.Netmap
}
var file_proto_netmap_service_proto_depIdxs = []int32{
	6,  // 0: neo.fs.v2.netmap.LocalNodeInfoRequest.body:type_name -> neo.fs.v2.netmap.LocalNodeInfoRequest.Body
	12, // 1: neo.fs.v2.netmap.LocalNodeInfoRequest.meta_header:type_name -> neo.fs.v2.session.RequestMetaHeader
	13, // 2: neo.fs.v2.netmap.LocalNodeInfoRequest.verify_header:type_name -> neo.fs.v2.session.RequestVerificationHeader
	7,  // 3: neo.fs.v2.netmap.LocalNodeInfoResponse.body:type_name -> neo.fs.v2.netmap.LocalNodeInfoResponse.Body
	14, // 4: neo.fs.v2.netmap.LocalNodeInfoResponse.meta_header:type_name -> neo.fs.v2.session.ResponseMetaHeader
	15, // 5: neo.fs.v2.netmap.LocalNodeInfoResponse.verify_header:type_name -> neo.fs.v2.session.ResponseVerificationHeader
	8,  // 6: neo.fs.v2.netmap.NetworkInfoRequest.body:type_name -> neo.fs.v2.netmap.NetworkInfoRequest.Body
	12, // 7: neo.fs.v2.netmap.NetworkInfoRequest.meta_header:type_name -> neo.fs.v2.session.RequestMetaHeader
	13, // 8: neo.fs.v2.netmap.NetworkInfoRequest.verify_header:type_name -> neo.fs.v2.session.RequestVerificationHeader
	9,  // 9: neo.fs.v2.netmap.NetworkInfoResponse.body:type_name -> neo.fs.v2.netmap.NetworkInfoResponse.Body
	14, // 10: neo.fs.v2.netmap.NetworkInfoResponse.meta_header:type_name -> neo.fs.v2.session.ResponseMetaHeader
	15, // 11: neo.fs.v2.netmap.NetworkInfoResponse.verify_header:type_name -> neo.fs.v2.session.ResponseVerificationHeader
	10, // 12: neo.fs.v2.netmap.NetmapSnapshotRequest.body:type_name -> neo.fs.v2.netmap.NetmapSnapshotRequest.Body
	12, // 13: neo.fs.v2.netmap.NetmapSnapshotRequest.meta_header:type_name -> neo.fs.v2.session.RequestMetaHeader
	13, // 14: neo.fs.v2.netmap.NetmapSnapshotRequest.verify_header:type_name -> neo.fs.v2.session.RequestVerificationHeader
	11, // 15: neo.fs.v2.netmap.NetmapSnapshotResponse.body:type_name -> neo.fs.v2.netmap.NetmapSnapshotResponse.Body
	14, // 16: neo.fs.v2.netmap.NetmapSnapshotResponse.meta_header:type_name -> neo.fs.v2.session.ResponseMetaHeader
	15, // 17: neo.fs.v2.netmap.NetmapSnapshotResponse.verify_header:type_name -> neo.fs.v2.session.ResponseVerificationHeader
	16, // 18: neo.fs.v2.netmap.LocalNodeInfoResponse.Body.version:type_name -> neo.fs.v2.refs.Version
	17, // 19: neo.fs.v2.netmap.LocalNodeInfoResponse.Body.node_info:type_name -> neo.fs.v2.netmap.NodeInfo
	18, // 20: neo.fs.v2.netmap.NetworkInfoResponse.Body.network_info:type_name -> neo.fs.v2.netmap.NetworkInfo
	19, // 21: neo.fs.v2.netmap.NetmapSnapshotResponse.Body.netmap:type_name -> neo.fs.v2.netmap.Netmap
	0,  // 22: neo.fs.v2.netmap.NetmapService.LocalNodeInfo:input_type -> neo.fs.v2.netmap.LocalNodeInfoRequest
	2,  // 23: neo.fs.v2.netmap.NetmapService.NetworkInfo:input_type -> neo.fs.v2.netmap.NetworkInfoRequest
	4,  // 24: neo.fs.v2.netmap.NetmapService.NetmapSnapshot:input_type -> neo.fs.v2.netmap.NetmapSnapshotRequest
	1,  // 25: neo.fs.v2.netmap.NetmapService.LocalNodeInfo:output_type -> neo.fs.v2.netmap.LocalNodeInfoResponse
	3,  // 26: neo.fs.v2.netmap.NetmapService.NetworkInfo:output_type -> neo.fs.v2.netmap.NetworkInfoResponse
	5,  // 27: neo.fs.v2.netmap.NetmapService.NetmapSnapshot:output_type -> neo.fs.v2.netmap.NetmapSnapshotResponse
	25, // [25:28] is the sub-list for method output_type
	22, // [22:25] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_proto_netmap_service_proto_init() }
func file_proto_netmap_service_proto_init() {
	if File_proto_netmap_service_proto != nil {
		return
	}
	file_proto_netmap_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_netmap_service_proto_rawDesc), len(file_proto_netmap_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_netmap_service_proto_goTypes,
		DependencyIndexes: file_proto_netmap_service_proto_depIdxs,
		MessageInfos:      file_proto_netmap_service_proto_msgTypes,
	}.Build()
	File_proto_netmap_service_proto = out.File
	file_proto_netmap_service_proto_goTypes = nil
	file_proto_netmap_service_proto_depIdxs = nil
}
