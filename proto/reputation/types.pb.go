// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/reputation/types.proto

package reputation

import (
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NeoFS unique peer identifier is a 33 byte long compressed public key of the
// node, the same as the one stored in the network map.
//
// String presentation is a
// [base58](https://tools.ietf.org/html/draft-msporny-base58-02) encoded string.
//
// JSON value will be data encoded as a string using standard base64
// encoding with paddings. Either
// [standard](https://tools.ietf.org/html/rfc4648#section-4) or
// [URL-safe](https://tools.ietf.org/html/rfc4648#section-5) base64 encoding
// with/without paddings are accepted.
type PeerID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer node's public key
	PublicKey     []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerID) Reset() {
	*x = PeerID{}
	mi := &file_proto_reputation_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerID) ProtoMessage() {}

func (x *PeerID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reputation_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerID.ProtoReflect.Descriptor instead.
func (*PeerID) Descriptor() ([]byte, []int) {
	return file_proto_reputation_types_proto_rawDescGZIP(), []int{0}
}

func (x *PeerID) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Trust level to a NeoFS network peer.
type Trust struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the trusted peer
	Peer *PeerID `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	// Trust level in [0:1] range
	Value         float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trust) Reset() {
	*x = Trust{}
	mi := &file_proto_reputation_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trust) ProtoMessage() {}

func (x *Trust) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reputation_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trust.ProtoReflect.Descriptor instead.
func (*Trust) Descriptor() ([]byte, []int) {
	return file_proto_reputation_types_proto_rawDescGZIP(), []int{1}
}

func (x *Trust) GetPeer() *PeerID {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *Trust) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Trust level of a peer to a peer.
type PeerToPeerTrust struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the trusting peer
	TrustingPeer *PeerID `protobuf:"bytes,1,opt,name=trusting_peer,json=trustingPeer,proto3" json:"trusting_peer,omitempty"`
	// Trust level
	Trust         *Trust `protobuf:"bytes,2,opt,name=trust,proto3" json:"trust,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerToPeerTrust) Reset() {
	*x = PeerToPeerTrust{}
	mi := &file_proto_reputation_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerToPeerTrust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerToPeerTrust) ProtoMessage() {}

func (x *PeerToPeerTrust) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reputation_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerToPeerTrust.ProtoReflect.Descriptor instead.
func (*PeerToPeerTrust) Descriptor() ([]byte, []int) {
	return file_proto_reputation_types_proto_rawDescGZIP(), []int{2}
}

func (x *PeerToPeerTrust) GetTrustingPeer() *PeerID {
	if x != nil {
		return x.TrustingPeer
	}
	return nil
}

func (x *PeerToPeerTrust) GetTrust() *Trust {
	if x != nil {
		return x.Trust
	}
	return nil
}

// Global trust level to NeoFS node.
type GlobalTrust struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message format version. Effectively, the version of API library used to create
	// the message.
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Message body
	Body *GlobalTrust_Body `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// Signature of the binary `body` field by the manager.
	Signature     *refs.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalTrust) Reset() {
	*x = GlobalTrust{}
	mi := &file_proto_reputation_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalTrust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalTrust) ProtoMessage() {}

func (x *GlobalTrust) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reputation_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalTrust.ProtoReflect.Descriptor instead.
func (*GlobalTrust) Descriptor() ([]byte, []int) {
	return file_proto_reputation_types_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalTrust) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *GlobalTrust) GetBody() *GlobalTrust_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *GlobalTrust) GetSignature() *refs.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Message body structure.
type GlobalTrust_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Node manager ID
	Manager *PeerID `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	// Global trust level
	Trust         *Trust `protobuf:"bytes,2,opt,name=trust,proto3" json:"trust,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalTrust_Body) Reset() {
	*x = GlobalTrust_Body{}
	mi := &file_proto_reputation_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalTrust_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalTrust_Body) ProtoMessage() {}

func (x *GlobalTrust_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reputation_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalTrust_Body.ProtoReflect.Descriptor instead.
func (*GlobalTrust_Body) Descriptor() ([]byte, []int) {
	return file_proto_reputation_types_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GlobalTrust_Body) GetManager() *PeerID {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *GlobalTrust_Body) GetTrust() *Trust {
	if x != nil {
		return x.Trust
	}
	return nil
}

var File_proto_reputation_types_proto protoreflect.FileDescriptor

const file_proto_reputation_types_proto_rawDesc = "" +
	"\n" +
	"\x1cproto/reputation/types.proto\x12\x14neo.fs.v2.reputation\x1a\x16proto/refs/types.proto\"'\n" +
	"\x06PeerID\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\"O\n" +
	"\x05Trust\x120\n" +
	"\x04peer\x18\x01 \x01(\v2\x1c.neo.fs.v2.reputation.PeerIDR\x04peer\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\"\x87\x01\n" +
	"\x0fPeerToPeerTrust\x12A\n" +
	"\rtrusting_peer\x18\x01 \x01(\v2\x1c.neo.fs.v2.reputation.PeerIDR\ftrustingPeer\x121\n" +
	"\x05trust\x18\x02 \x01(\v2\x1b.neo.fs.v2.reputation.TrustR\x05trust\"\xa8\x02\n" +
	"\vGlobalTrust\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x12:\n" +
	"\x04body\x18\x02 \x01(\v2&.neo.fs.v2.reputation.GlobalTrust.BodyR\x04body\x127\n" +
	"\tsignature\x18\x03 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\tsignature\x1aq\n" +
	"\x04Body\x126\n" +
	"\amanager\x18\x01 \x01(\v2\x1c.neo.fs.v2.reputation.PeerIDR\amanager\x121\n" +
	"\x05trust\x18\x02 \x01(\v2\x1b.neo.fs.v2.reputation.TrustR\x05trustBUZ2github.com/nspcc-dev/neofs-sdk-go/proto/reputation\xaa\x02\x1eNeo.FileStorage.API.Reputationb\x06proto3"

var (
	file_proto_reputation_types_proto_rawDescOnce sync.Once
	file_proto_reputation_types_proto_rawDescData []byte
)

func file_proto_reputation_types_proto_rawDescGZIP() []byte {
	file_proto_reputation_types_proto_rawDescOnce.Do(func() {
		file_proto_reputation_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_reputation_types_proto_rawDesc), len(file_proto_reputation_types_proto_rawDesc)))
	})
	return file_proto_reputation_types_proto_rawDescData
}

var file_proto_reputation_types_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_reputation_types_proto_goTypes = []any{
	(*PeerID)(nil),           // 0: neo.fs.v2.reputation.PeerID
	(*Trust)(nil),            // 1: neo.fs.v2.reputation.Trust
	(*PeerToPeerTrust)(nil),  // 2: neo.fs.v2.reputation.PeerToPeerTrust
	(*GlobalTrust)(nil),      // 3: neo.fs.v2.reputation.GlobalTrust
	(*GlobalTrust_Body)(nil), // 4: neo.fs.v2.reputation.GlobalTrust.Body
	(*refs.Version)(nil),     // 5: neo.fs.v2.refs.Version
	(*refs.Signature)(nil),   // 6: neo.fs.v2.refs.Signature
}
var file_proto_reputation_types_proto_depIdxs = []int32{
	0, // 0: neo.fs.v2.reputation.Trust.peer:type_name -> neo.fs.v2.reputation.PeerID
	0, // 1: neo.fs.v2.reputation.PeerToPeerTrust.trusting_peer:type_name -> neo.fs.v2.reputation.PeerID
	1, // 2: neo.fs.v2.reputation.PeerToPeerTrust.trust:type_name -> neo.fs.v2.reputation.Trust
	5, // 3: neo.fs.v2.reputation.GlobalTrust.version:type_name -> neo.fs.v2.refs.Version
	4, // 4: neo.fs.v2.reputation.GlobalTrust.body:type_name -> neo.fs.v2.reputation.GlobalTrust.Body
	6, // 5: neo.fs.v2.reputation.GlobalTrust.signature:type_name -> neo.fs.v2.refs.Signature
	0, // 6: neo.fs.v2.reputation.GlobalTrust.Body.manager:type_name -> neo.fs.v2.reputation.PeerID
	1, // 7: neo.fs.v2.reputation.GlobalTrust.Body.trust:type_name -> neo.fs.v2.reputation.Trust
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_proto_reputation_types_proto_init() }
func file_proto_reputation_types_proto_init() {
	if File_proto_reputation_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_reputation_types_proto_rawDesc), len(file_proto_reputation_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_reputation_types_proto_goTypes,
		DependencyIndexes: file_proto_reputation_types_proto_depIdxs,
		MessageInfos:      file_proto_reputation_types_proto_msgTypes,
	}.Build()
	File_proto_reputation_types_proto = out.File
	file_proto_reputation_types_proto_goTypes = nil
	file_proto_reputation_types_proto_depIdxs = nil
}
