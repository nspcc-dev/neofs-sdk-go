// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/container/types.proto

package container

import (
	netmap "github.com/nspcc-dev/neofs-sdk-go/proto/netmap"
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Container is a structure that defines object placement behaviour. Objects can
// be stored only within containers. They define placement rule, attributes and
// access control information. An ID of a container is a 32 byte long SHA256 hash
// of stable-marshalled container message.
type Container struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Container format version. Effectively, the version of API library used to
	// create the container.
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Identifier of the container owner
	OwnerId *refs.OwnerID `protobuf:"bytes,2,opt,name=owner_id,json=ownerID,proto3" json:"owner_id,omitempty"`
	// Nonce is a 16 byte UUIDv4, used to avoid collisions of `ContainerID`s
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// `BasicACL` contains access control rules for the owner, system and others groups,
	// as well as permission bits for `BearerToken` and `Extended ACL`
	BasicAcl uint32 `protobuf:"varint,4,opt,name=basic_acl,json=basicACL,proto3" json:"basic_acl,omitempty"`
	// Attributes represent immutable container's meta data
	Attributes []*Container_Attribute `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Placement policy for the object inside the container
	PlacementPolicy *netmap.PlacementPolicy `protobuf:"bytes,6,opt,name=placement_policy,json=placementPolicy,proto3" json:"placement_policy,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_proto_container_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_proto_container_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_proto_container_types_proto_rawDescGZIP(), []int{0}
}

func (x *Container) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Container) GetOwnerId() *refs.OwnerID {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *Container) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Container) GetBasicAcl() uint32 {
	if x != nil {
		return x.BasicAcl
	}
	return 0
}

func (x *Container) GetAttributes() []*Container_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Container) GetPlacementPolicy() *netmap.PlacementPolicy {
	if x != nil {
		return x.PlacementPolicy
	}
	return nil
}

// `Attribute` is a user-defined Key-Value metadata pair attached to the
// container. Container attributes are immutable. They are set at the moment of
// container creation and can never be added or updated.
//
// Key name must be a container-unique valid UTF-8 string. Value can't be
// empty. Containers with duplicated attribute names or attributes with empty
// values will be considered invalid. Zero byte is also forbidden in UTF-8
// strings.
//
// There are some "well-known" attributes affecting system behaviour:
//
//   - __NEOFS__SUBNET \
//     DEPRECATED. Was used for a string ID of a container's storage subnet.
//     Currently doesn't affect anything.
//   - __NEOFS__NAME \
//     String of a human-friendly container name registered as a domain in
//     NNS contract.
//   - __NEOFS__ZONE \
//     String of a zone for `__NEOFS__NAME`. Used as a TLD of a domain name in NNS
//     contract. If no zone is specified, use default zone: `container`.
//   - __NEOFS__DISABLE_HOMOMORPHIC_HASHING \
//     Disables homomorphic hashing for the container if the value equals "true" string.
//     Any other values are interpreted as missing attribute. Container could be
//     accepted in a NeoFS network only if the global network hashing configuration
//     value corresponds with that attribute's value. After container inclusion, network
//     setting is ignored.
//   - __NEOFS__METAINFO_CONSISTENCY \
//     Policy rule that defines the condition under which an object is considered
//     processed. Acceptable values and meanings:
//     1. "strict": SN processes objects' meta information, it is validated,
//     indexed and signed accordingly by a required minimal number of nodes
//     that are included in the container, a corresponding object inclusion
//     notification can be caught
//     2. "optimistic": the same as "strict" but a successful PUT operation
//     does not mean objects' meta information has been multi signed and
//     indexed correctly, however, SNs will try to do it asynchronously;
//     in general PUT operations are expected to be faster than in the
//     "strict" case
//     3. <other cases>: SN does not process objects' meta
//     information, it is not indexed and object presence/number of copies
//     is not proven after a successful object PUT operation; the behavior
//     is the same as it was before this attribute introduction
//
// And some well-known attributes used by applications only:
//
//   - Name \
//     Human-friendly name
//   - Timestamp \
//     User-defined local time of container creation in Unix Timestamp format
type Container_Attribute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Attribute name key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Attribute value
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Container_Attribute) Reset() {
	*x = Container_Attribute{}
	mi := &file_proto_container_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container_Attribute) ProtoMessage() {}

func (x *Container_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_container_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container_Attribute.ProtoReflect.Descriptor instead.
func (*Container_Attribute) Descriptor() ([]byte, []int) {
	return file_proto_container_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Container_Attribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Container_Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_proto_container_types_proto protoreflect.FileDescriptor

const file_proto_container_types_proto_rawDesc = "" +
	"\n" +
	"\x1bproto/container/types.proto\x12\x13neo.fs.v2.container\x1a\x18proto/netmap/types.proto\x1a\x16proto/refs/types.proto\"\xf2\x02\n" +
	"\tContainer\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x122\n" +
	"\bowner_id\x18\x02 \x01(\v2\x17.neo.fs.v2.refs.OwnerIDR\aownerID\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\fR\x05nonce\x12\x1b\n" +
	"\tbasic_acl\x18\x04 \x01(\rR\bbasicACL\x12H\n" +
	"\n" +
	"attributes\x18\x05 \x03(\v2(.neo.fs.v2.container.Container.AttributeR\n" +
	"attributes\x12L\n" +
	"\x10placement_policy\x18\x06 \x01(\v2!.neo.fs.v2.netmap.PlacementPolicyR\x0fplacementPolicy\x1a3\n" +
	"\tAttribute\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05valueBSZ1github.com/nspcc-dev/neofs-sdk-go/proto/container\xaa\x02\x1dNeo.FileStorage.API.Containerb\x06proto3"

var (
	file_proto_container_types_proto_rawDescOnce sync.Once
	file_proto_container_types_proto_rawDescData []byte
)

func file_proto_container_types_proto_rawDescGZIP() []byte {
	file_proto_container_types_proto_rawDescOnce.Do(func() {
		file_proto_container_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_container_types_proto_rawDesc), len(file_proto_container_types_proto_rawDesc)))
	})
	return file_proto_container_types_proto_rawDescData
}

var file_proto_container_types_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_container_types_proto_goTypes = []any{
	(*Container)(nil),              // 0: neo.fs.v2.container.Container
	(*Container_Attribute)(nil),    // 1: neo.fs.v2.container.Container.Attribute
	(*refs.Version)(nil),           // 2: neo.fs.v2.refs.Version
	(*refs.OwnerID)(nil),           // 3: neo.fs.v2.refs.OwnerID
	(*netmap.PlacementPolicy)(nil), // 4: neo.fs.v2.netmap.PlacementPolicy
}
var file_proto_container_types_proto_depIdxs = []int32{
	2, // 0: neo.fs.v2.container.Container.version:type_name -> neo.fs.v2.refs.Version
	3, // 1: neo.fs.v2.container.Container.owner_id:type_name -> neo.fs.v2.refs.OwnerID
	1, // 2: neo.fs.v2.container.Container.attributes:type_name -> neo.fs.v2.container.Container.Attribute
	4, // 3: neo.fs.v2.container.Container.placement_policy:type_name -> neo.fs.v2.netmap.PlacementPolicy
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_container_types_proto_init() }
func file_proto_container_types_proto_init() {
	if File_proto_container_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_container_types_proto_rawDesc), len(file_proto_container_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_container_types_proto_goTypes,
		DependencyIndexes: file_proto_container_types_proto_depIdxs,
		MessageInfos:      file_proto_container_types_proto_msgTypes,
	}.Build()
	File_proto_container_types_proto = out.File
	file_proto_container_types_proto_goTypes = nil
	file_proto_container_types_proto_depIdxs = nil
}
