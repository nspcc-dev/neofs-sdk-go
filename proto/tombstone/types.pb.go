// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/tombstone/types.proto

package tombstone

import (
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DEPRECATED: delete objects 1-to-1 with __NEOFS__ASSOCIATE object attribute in a
// TOMBSTONE-typed object with no payload. For objects of 2.18+ API version, it is
// prohibited to have TOMBSTONE objects with payload.
//
// Tombstone keeps record of deleted objects for a few epochs until they are
// purged from the NeoFS network. It is impossible to delete a tombstone object
// via ObjectService.Delete RPC call.
type Tombstone struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Last NeoFS epoch number of the tombstone lifetime. It's set by the tombstone
	// creator depending on the current NeoFS network settings.
	// DEPRECATED. Field ignored by servers, set corresponding object attribute
	// `__NEOFS__EXPIRATION_EPOCH` only.
	//
	// Deprecated: Marked as deprecated in proto/tombstone/types.proto.
	ExpirationEpoch uint64 `protobuf:"varint,1,opt,name=expiration_epoch,json=expirationEpoch,proto3" json:"expiration_epoch,omitempty"`
	// 16 byte UUID used to identify the split object hierarchy parts. Must be
	// unique inside a container. All objects participating in the split must
	// have the same `split_id` value.
	// DEPRECATED. The field is ignored by servers.
	SplitId []byte `protobuf:"bytes,2,opt,name=split_id,json=splitID,proto3" json:"split_id,omitempty"`
	// List of objects to be deleted.
	// IDs should be either:
	//  1. Root object IDs (objects that are not split OR parent objects)
	//  2. Children IDs for unfinished objects that does not have LINK objects (garbage collecting).
	Members       []*refs.ObjectID `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tombstone) Reset() {
	*x = Tombstone{}
	mi := &file_proto_tombstone_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tombstone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tombstone) ProtoMessage() {}

func (x *Tombstone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tombstone_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tombstone.ProtoReflect.Descriptor instead.
func (*Tombstone) Descriptor() ([]byte, []int) {
	return file_proto_tombstone_types_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in proto/tombstone/types.proto.
func (x *Tombstone) GetExpirationEpoch() uint64 {
	if x != nil {
		return x.ExpirationEpoch
	}
	return 0
}

func (x *Tombstone) GetSplitId() []byte {
	if x != nil {
		return x.SplitId
	}
	return nil
}

func (x *Tombstone) GetMembers() []*refs.ObjectID {
	if x != nil {
		return x.Members
	}
	return nil
}

var File_proto_tombstone_types_proto protoreflect.FileDescriptor

const file_proto_tombstone_types_proto_rawDesc = "" +
	"\n" +
	"\x1bproto/tombstone/types.proto\x12\x13neo.fs.v2.tombstone\x1a\x16proto/refs/types.proto\"\x89\x01\n" +
	"\tTombstone\x12-\n" +
	"\x10expiration_epoch\x18\x01 \x01(\x04B\x02\x18\x01R\x0fexpirationEpoch\x12\x19\n" +
	"\bsplit_id\x18\x02 \x01(\fR\asplitID\x122\n" +
	"\amembers\x18\x03 \x03(\v2\x18.neo.fs.v2.refs.ObjectIDR\amembersBSZ1github.com/nspcc-dev/neofs-sdk-go/proto/tombstone\xaa\x02\x1dNeo.FileStorage.API.Tombstoneb\x06proto3"

var (
	file_proto_tombstone_types_proto_rawDescOnce sync.Once
	file_proto_tombstone_types_proto_rawDescData []byte
)

func file_proto_tombstone_types_proto_rawDescGZIP() []byte {
	file_proto_tombstone_types_proto_rawDescOnce.Do(func() {
		file_proto_tombstone_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_tombstone_types_proto_rawDesc), len(file_proto_tombstone_types_proto_rawDesc)))
	})
	return file_proto_tombstone_types_proto_rawDescData
}

var file_proto_tombstone_types_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_tombstone_types_proto_goTypes = []any{
	(*Tombstone)(nil),     // 0: neo.fs.v2.tombstone.Tombstone
	(*refs.ObjectID)(nil), // 1: neo.fs.v2.refs.ObjectID
}
var file_proto_tombstone_types_proto_depIdxs = []int32{
	1, // 0: neo.fs.v2.tombstone.Tombstone.members:type_name -> neo.fs.v2.refs.ObjectID
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_tombstone_types_proto_init() }
func file_proto_tombstone_types_proto_init() {
	if File_proto_tombstone_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_tombstone_types_proto_rawDesc), len(file_proto_tombstone_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tombstone_types_proto_goTypes,
		DependencyIndexes: file_proto_tombstone_types_proto_depIdxs,
		MessageInfos:      file_proto_tombstone_types_proto_msgTypes,
	}.Build()
	File_proto_tombstone_types_proto = out.File
	file_proto_tombstone_types_proto_goTypes = nil
	file_proto_tombstone_types_proto_depIdxs = nil
}
