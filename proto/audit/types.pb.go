// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/audit/types.proto

package audit

import (
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DataAuditResult keeps record of conducted Data Audits. The detailed report is
// generated separately.
//
// DEPRECATED: This audit mechanism is no longer supported (2.18+).
type DataAuditResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data Audit Result format version. Effectively, the version of API library
	// used to report DataAuditResult structure.
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Epoch number when the Data Audit was conducted
	AuditEpoch uint64 `protobuf:"fixed64,2,opt,name=audit_epoch,json=auditEpoch,proto3" json:"audit_epoch,omitempty"`
	// Container under audit
	ContainerId *refs.ContainerID `protobuf:"bytes,3,opt,name=container_id,json=containerID,proto3" json:"container_id,omitempty"`
	// Public key of the auditing InnerRing node in a binary format
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Shows if Data Audit process was complete in time or if it was cancelled
	Complete bool `protobuf:"varint,5,opt,name=complete,proto3" json:"complete,omitempty"`
	// Number of request done at PoR stage
	Requests uint32 `protobuf:"varint,6,opt,name=requests,proto3" json:"requests,omitempty"`
	// Number of retries done at PoR stage
	Retries uint32 `protobuf:"varint,7,opt,name=retries,proto3" json:"retries,omitempty"`
	// List of Storage Groups that passed audit PoR stage
	PassSg []*refs.ObjectID `protobuf:"bytes,8,rep,name=pass_sg,json=passSG,proto3" json:"pass_sg,omitempty"`
	// List of Storage Groups that failed audit PoR stage
	FailSg []*refs.ObjectID `protobuf:"bytes,9,rep,name=fail_sg,json=failSG,proto3" json:"fail_sg,omitempty"`
	// Number of sampled objects under the audit placed in an optimal way according to
	// the containers placement policy when checking PoP
	Hit uint32 `protobuf:"varint,10,opt,name=hit,proto3" json:"hit,omitempty"`
	// Number of sampled objects under the audit placed in suboptimal way according to
	// the containers placement policy, but still at a satisfactory level when
	// checking PoP
	Miss uint32 `protobuf:"varint,11,opt,name=miss,proto3" json:"miss,omitempty"`
	// Number of sampled objects under the audit stored inconsistently with the
	// placement policy or not found at all when checking PoP
	Fail uint32 `protobuf:"varint,12,opt,name=fail,proto3" json:"fail,omitempty"`
	// List of storage node public keys that passed at least one PDP
	PassNodes [][]byte `protobuf:"bytes,13,rep,name=pass_nodes,json=passNodes,proto3" json:"pass_nodes,omitempty"`
	// List of storage node public keys that failed at least one PDP
	FailNodes     [][]byte `protobuf:"bytes,14,rep,name=fail_nodes,json=failNodes,proto3" json:"fail_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataAuditResult) Reset() {
	*x = DataAuditResult{}
	mi := &file_proto_audit_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataAuditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAuditResult) ProtoMessage() {}

func (x *DataAuditResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_audit_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAuditResult.ProtoReflect.Descriptor instead.
func (*DataAuditResult) Descriptor() ([]byte, []int) {
	return file_proto_audit_types_proto_rawDescGZIP(), []int{0}
}

func (x *DataAuditResult) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DataAuditResult) GetAuditEpoch() uint64 {
	if x != nil {
		return x.AuditEpoch
	}
	return 0
}

func (x *DataAuditResult) GetContainerId() *refs.ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *DataAuditResult) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DataAuditResult) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *DataAuditResult) GetRequests() uint32 {
	if x != nil {
		return x.Requests
	}
	return 0
}

func (x *DataAuditResult) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *DataAuditResult) GetPassSg() []*refs.ObjectID {
	if x != nil {
		return x.PassSg
	}
	return nil
}

func (x *DataAuditResult) GetFailSg() []*refs.ObjectID {
	if x != nil {
		return x.FailSg
	}
	return nil
}

func (x *DataAuditResult) GetHit() uint32 {
	if x != nil {
		return x.Hit
	}
	return 0
}

func (x *DataAuditResult) GetMiss() uint32 {
	if x != nil {
		return x.Miss
	}
	return 0
}

func (x *DataAuditResult) GetFail() uint32 {
	if x != nil {
		return x.Fail
	}
	return 0
}

func (x *DataAuditResult) GetPassNodes() [][]byte {
	if x != nil {
		return x.PassNodes
	}
	return nil
}

func (x *DataAuditResult) GetFailNodes() [][]byte {
	if x != nil {
		return x.FailNodes
	}
	return nil
}

var File_proto_audit_types_proto protoreflect.FileDescriptor

const file_proto_audit_types_proto_rawDesc = "" +
	"\n" +
	"\x17proto/audit/types.proto\x12\x0fneo.fs.v2.audit\x1a\x16proto/refs/types.proto\"\xf4\x03\n" +
	"\x0fDataAuditResult\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x12\x1f\n" +
	"\vaudit_epoch\x18\x02 \x01(\x06R\n" +
	"auditEpoch\x12>\n" +
	"\fcontainer_id\x18\x03 \x01(\v2\x1b.neo.fs.v2.refs.ContainerIDR\vcontainerID\x12\x1d\n" +
	"\n" +
	"public_key\x18\x04 \x01(\fR\tpublicKey\x12\x1a\n" +
	"\bcomplete\x18\x05 \x01(\bR\bcomplete\x12\x1a\n" +
	"\brequests\x18\x06 \x01(\rR\brequests\x12\x18\n" +
	"\aretries\x18\a \x01(\rR\aretries\x121\n" +
	"\apass_sg\x18\b \x03(\v2\x18.neo.fs.v2.refs.ObjectIDR\x06passSG\x121\n" +
	"\afail_sg\x18\t \x03(\v2\x18.neo.fs.v2.refs.ObjectIDR\x06failSG\x12\x10\n" +
	"\x03hit\x18\n" +
	" \x01(\rR\x03hit\x12\x12\n" +
	"\x04miss\x18\v \x01(\rR\x04miss\x12\x12\n" +
	"\x04fail\x18\f \x01(\rR\x04fail\x12\x1d\n" +
	"\n" +
	"pass_nodes\x18\r \x03(\fR\tpassNodes\x12\x1d\n" +
	"\n" +
	"fail_nodes\x18\x0e \x03(\fR\tfailNodesBKZ-github.com/nspcc-dev/neofs-sdk-go/proto/audit\xaa\x02\x19Neo.FileStorage.API.Auditb\x06proto3"

var (
	file_proto_audit_types_proto_rawDescOnce sync.Once
	file_proto_audit_types_proto_rawDescData []byte
)

func file_proto_audit_types_proto_rawDescGZIP() []byte {
	file_proto_audit_types_proto_rawDescOnce.Do(func() {
		file_proto_audit_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_audit_types_proto_rawDesc), len(file_proto_audit_types_proto_rawDesc)))
	})
	return file_proto_audit_types_proto_rawDescData
}

var file_proto_audit_types_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_audit_types_proto_goTypes = []any{
	(*DataAuditResult)(nil),  // 0: neo.fs.v2.audit.DataAuditResult
	(*refs.Version)(nil),     // 1: neo.fs.v2.refs.Version
	(*refs.ContainerID)(nil), // 2: neo.fs.v2.refs.ContainerID
	(*refs.ObjectID)(nil),    // 3: neo.fs.v2.refs.ObjectID
}
var file_proto_audit_types_proto_depIdxs = []int32{
	1, // 0: neo.fs.v2.audit.DataAuditResult.version:type_name -> neo.fs.v2.refs.Version
	2, // 1: neo.fs.v2.audit.DataAuditResult.container_id:type_name -> neo.fs.v2.refs.ContainerID
	3, // 2: neo.fs.v2.audit.DataAuditResult.pass_sg:type_name -> neo.fs.v2.refs.ObjectID
	3, // 3: neo.fs.v2.audit.DataAuditResult.fail_sg:type_name -> neo.fs.v2.refs.ObjectID
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_audit_types_proto_init() }
func file_proto_audit_types_proto_init() {
	if File_proto_audit_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_audit_types_proto_rawDesc), len(file_proto_audit_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_audit_types_proto_goTypes,
		DependencyIndexes: file_proto_audit_types_proto_depIdxs,
		MessageInfos:      file_proto_audit_types_proto_msgTypes,
	}.Build()
	File_proto_audit_types_proto = out.File
	file_proto_audit_types_proto_goTypes = nil
	file_proto_audit_types_proto_depIdxs = nil
}
