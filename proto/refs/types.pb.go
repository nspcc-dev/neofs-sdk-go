// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/refs/types.proto

package refs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Signature scheme describes digital signing scheme used for (key, signature) pair.
type SignatureScheme int32

const (
	// ECDSA with SHA-512 hashing (FIPS 186-3)
	SignatureScheme_ECDSA_SHA512 SignatureScheme = 0
	// Deterministic ECDSA with SHA-256 hashing (RFC 6979)
	SignatureScheme_ECDSA_RFC6979_SHA256 SignatureScheme = 1
	// Deterministic ECDSA with SHA-256 hashing using WalletConnect API.
	// Here the algorithm is the same, but the message format differs.
	SignatureScheme_ECDSA_RFC6979_SHA256_WALLET_CONNECT SignatureScheme = 2
	// Neo N3 witness.
	SignatureScheme_N3 SignatureScheme = 3
)

// Enum value maps for SignatureScheme.
var (
	SignatureScheme_name = map[int32]string{
		0: "ECDSA_SHA512",
		1: "ECDSA_RFC6979_SHA256",
		2: "ECDSA_RFC6979_SHA256_WALLET_CONNECT",
		3: "N3",
	}
	SignatureScheme_value = map[string]int32{
		"ECDSA_SHA512":                        0,
		"ECDSA_RFC6979_SHA256":                1,
		"ECDSA_RFC6979_SHA256_WALLET_CONNECT": 2,
		"N3":                                  3,
	}
)

func (x SignatureScheme) Enum() *SignatureScheme {
	p := new(SignatureScheme)
	*p = x
	return p
}

func (x SignatureScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_refs_types_proto_enumTypes[0].Descriptor()
}

func (SignatureScheme) Type() protoreflect.EnumType {
	return &file_proto_refs_types_proto_enumTypes[0]
}

func (x SignatureScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureScheme.Descriptor instead.
func (SignatureScheme) EnumDescriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{0}
}

// Checksum algorithm type.
type ChecksumType int32

const (
	// Unknown. Not used
	ChecksumType_CHECKSUM_TYPE_UNSPECIFIED ChecksumType = 0
	// Tillich-Zemor homomorphic hash function
	ChecksumType_TZ ChecksumType = 1
	// SHA-256
	ChecksumType_SHA256 ChecksumType = 2
)

// Enum value maps for ChecksumType.
var (
	ChecksumType_name = map[int32]string{
		0: "CHECKSUM_TYPE_UNSPECIFIED",
		1: "TZ",
		2: "SHA256",
	}
	ChecksumType_value = map[string]int32{
		"CHECKSUM_TYPE_UNSPECIFIED": 0,
		"TZ":                        1,
		"SHA256":                    2,
	}
)

func (x ChecksumType) Enum() *ChecksumType {
	p := new(ChecksumType)
	*p = x
	return p
}

func (x ChecksumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChecksumType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_refs_types_proto_enumTypes[1].Descriptor()
}

func (ChecksumType) Type() protoreflect.EnumType {
	return &file_proto_refs_types_proto_enumTypes[1]
}

func (x ChecksumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChecksumType.Descriptor instead.
func (ChecksumType) EnumDescriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{1}
}

// Objects in NeoFS are addressed by their ContainerID and ObjectID.
//
// String presentation of `Address` is a concatenation of string encoded
// `ContainerID` and `ObjectID` delimited by '/' character.
type Address struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Container identifier
	ContainerId *ContainerID `protobuf:"bytes,1,opt,name=container_id,json=containerID,proto3" json:"container_id,omitempty"`
	// Object identifier
	ObjectId      *ObjectID `protobuf:"bytes,2,opt,name=object_id,json=objectID,proto3" json:"object_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_proto_refs_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetContainerId() *ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *Address) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

// NeoFS Object unique identifier. Objects are immutable and content-addressed.
// It means `ObjectID` will change if the `header` or the `payload` changes.
//
// `ObjectID` is a 32 byte long
// [SHA256](https://csrc.nist.gov/publications/detail/fips/180/4/final) hash of
// the object's `header` field, which, in it's turn, contains the hash of the object's
// payload. ID consisting of all zero bytes is reserved for undefined value and
// must not be specified as a field.
//
// String presentation is a
// [base58](https://tools.ietf.org/html/draft-msporny-base58-02) encoded string.
//
// JSON value will be data encoded as a string using standard base64
// encoding with paddings. Either
// [standard](https://tools.ietf.org/html/rfc4648#section-4) or
// [URL-safe](https://tools.ietf.org/html/rfc4648#section-5) base64 encoding
// with/without paddings are accepted.
type ObjectID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Object identifier in a binary format
	Value         []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectID) Reset() {
	*x = ObjectID{}
	mi := &file_proto_refs_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectID) ProtoMessage() {}

func (x *ObjectID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectID.ProtoReflect.Descriptor instead.
func (*ObjectID) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// NeoFS container identifier. Container structures are immutable and
// content-addressed.
//
// `ContainerID` is a 32 byte long
// [SHA256](https://csrc.nist.gov/publications/detail/fips/180/4/final) hash of
// stable-marshalled container message. ID consisting of all zero bytes is
// reserved for undefined value and must not be specified as a field.
//
// String presentation is a
// [base58](https://tools.ietf.org/html/draft-msporny-base58-02) encoded string.
//
// JSON value will be data encoded as a string using standard base64
// encoding with paddings. Either
// [standard](https://tools.ietf.org/html/rfc4648#section-4) or
// [URL-safe](https://tools.ietf.org/html/rfc4648#section-5) base64 encoding
// with/without paddings are accepted.
type ContainerID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Container identifier in a binary format.
	Value         []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerID) Reset() {
	*x = ContainerID{}
	mi := &file_proto_refs_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerID) ProtoMessage() {}

func (x *ContainerID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerID.ProtoReflect.Descriptor instead.
func (*ContainerID) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// `OwnerID` is a derivative of a user's main public key. The transformation
// algorithm is the same as for Neo3 wallet addresses. Neo3 wallet address can
// be directly used as `OwnerID`.
//
// `OwnerID` is a 25 bytes sequence starting with Neo version prefix byte
// followed by 20 bytes of ScrptHash and 4 bytes of checksum.
//
// String presentation is a [Base58
// Check](https://en.bitcoin.it/wiki/Base58Check_encoding) Encoded string.
//
// JSON value will be data encoded as a string using standard base64
// encoding with paddings. Either
// [standard](https://tools.ietf.org/html/rfc4648#section-4) or
// [URL-safe](https://tools.ietf.org/html/rfc4648#section-5) base64 encoding
// with/without paddings are accepted.
type OwnerID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the container owner in a binary format
	Value         []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnerID) Reset() {
	*x = OwnerID{}
	mi := &file_proto_refs_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerID) ProtoMessage() {}

func (x *OwnerID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerID.ProtoReflect.Descriptor instead.
func (*OwnerID) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{3}
}

func (x *OwnerID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// NeoFS subnetwork identifier.
//
// String representation of a value is base-10 integer.
//
// JSON representation is an object containing a single `value` number field.
//
// DEPRECATED. Kept for compatibility only.
type SubnetID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 4-byte integer subnetwork identifier.
	Value         uint32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetID) Reset() {
	*x = SubnetID{}
	mi := &file_proto_refs_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetID) ProtoMessage() {}

func (x *SubnetID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetID.ProtoReflect.Descriptor instead.
func (*SubnetID) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{4}
}

func (x *SubnetID) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// API version used by a node.
//
// String presentation is a Semantic Versioning 2.0.0 compatible version string
// with 'v' prefix. i.e. `vX.Y`, where `X` is the major number, `Y` is the minor number.
type Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Major API version
	Major uint32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	// Minor API version
	Minor         uint32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_proto_refs_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{5}
}

func (x *Version) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

// Signature of something in NeoFS.
type Signature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key used for signing. For N3 `scheme`, the field represents a
	// verification script.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Signature. For N3 `scheme`, the field represents an invocation script.
	Sign []byte `protobuf:"bytes,2,opt,name=sign,json=signature,proto3" json:"sign,omitempty"`
	// Scheme contains digital signature scheme identifier
	Scheme        SignatureScheme `protobuf:"varint,3,opt,name=scheme,proto3,enum=neo.fs.v2.refs.SignatureScheme" json:"scheme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_proto_refs_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{6}
}

func (x *Signature) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Signature) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *Signature) GetScheme() SignatureScheme {
	if x != nil {
		return x.Scheme
	}
	return SignatureScheme_ECDSA_SHA512
}

// RFC 6979 signature.
type SignatureRFC6979 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key used for signing. For N3 auth scheme, the field represents a
	// verification script.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Deterministic ECDSA with SHA-256 hashing. For N3 auth scheme, the field
	// represents an invocation script.
	Sign          []byte `protobuf:"bytes,2,opt,name=sign,json=signature,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignatureRFC6979) Reset() {
	*x = SignatureRFC6979{}
	mi := &file_proto_refs_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignatureRFC6979) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureRFC6979) ProtoMessage() {}

func (x *SignatureRFC6979) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureRFC6979.ProtoReflect.Descriptor instead.
func (*SignatureRFC6979) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{7}
}

func (x *SignatureRFC6979) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SignatureRFC6979) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

// Checksum message.
// Depending on checksum algorithm type, the string presentation may vary:
//
//   - TZ \
//     Hex encoded string without `0x` prefix
//   - SHA256 \
//     Hex encoded string without `0x` prefix
type Checksum struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Checksum algorithm type
	Type ChecksumType `protobuf:"varint,1,opt,name=type,proto3,enum=neo.fs.v2.refs.ChecksumType" json:"type,omitempty"`
	// Checksum itself
	Sum           []byte `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Checksum) Reset() {
	*x = Checksum{}
	mi := &file_proto_refs_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Checksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checksum) ProtoMessage() {}

func (x *Checksum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_refs_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checksum.ProtoReflect.Descriptor instead.
func (*Checksum) Descriptor() ([]byte, []int) {
	return file_proto_refs_types_proto_rawDescGZIP(), []int{8}
}

func (x *Checksum) GetType() ChecksumType {
	if x != nil {
		return x.Type
	}
	return ChecksumType_CHECKSUM_TYPE_UNSPECIFIED
}

func (x *Checksum) GetSum() []byte {
	if x != nil {
		return x.Sum
	}
	return nil
}

var File_proto_refs_types_proto protoreflect.FileDescriptor

const file_proto_refs_types_proto_rawDesc = "" +
	"\n" +
	"\x16proto/refs/types.proto\x12\x0eneo.fs.v2.refs\"\x80\x01\n" +
	"\aAddress\x12>\n" +
	"\fcontainer_id\x18\x01 \x01(\v2\x1b.neo.fs.v2.refs.ContainerIDR\vcontainerID\x125\n" +
	"\tobject_id\x18\x02 \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\bobjectID\" \n" +
	"\bObjectID\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05value\"#\n" +
	"\vContainerID\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05value\"\x1f\n" +
	"\aOwnerID\x12\x14\n" +
	"\x05value\x18\x01 \x01(\fR\x05value\" \n" +
	"\bSubnetID\x12\x14\n" +
	"\x05value\x18\x01 \x01(\aR\x05value\"5\n" +
	"\aVersion\x12\x14\n" +
	"\x05major\x18\x01 \x01(\rR\x05major\x12\x14\n" +
	"\x05minor\x18\x02 \x01(\rR\x05minor\"o\n" +
	"\tSignature\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x17\n" +
	"\x04sign\x18\x02 \x01(\fR\tsignature\x127\n" +
	"\x06scheme\x18\x03 \x01(\x0e2\x1f.neo.fs.v2.refs.SignatureSchemeR\x06scheme\"=\n" +
	"\x10SignatureRFC6979\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x17\n" +
	"\x04sign\x18\x02 \x01(\fR\tsignature\"N\n" +
	"\bChecksum\x120\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1c.neo.fs.v2.refs.ChecksumTypeR\x04type\x12\x10\n" +
	"\x03sum\x18\x02 \x01(\fR\x03sum*n\n" +
	"\x0fSignatureScheme\x12\x10\n" +
	"\fECDSA_SHA512\x10\x00\x12\x18\n" +
	"\x14ECDSA_RFC6979_SHA256\x10\x01\x12'\n" +
	"#ECDSA_RFC6979_SHA256_WALLET_CONNECT\x10\x02\x12\x06\n" +
	"\x02N3\x10\x03*A\n" +
	"\fChecksumType\x12\x1d\n" +
	"\x19CHECKSUM_TYPE_UNSPECIFIED\x10\x00\x12\x06\n" +
	"\x02TZ\x10\x01\x12\n" +
	"\n" +
	"\x06SHA256\x10\x02BIZ,github.com/nspcc-dev/neofs-sdk-go/proto/refs\xaa\x02\x18Neo.FileStorage.API.Refsb\x06proto3"

var (
	file_proto_refs_types_proto_rawDescOnce sync.Once
	file_proto_refs_types_proto_rawDescData []byte
)

func file_proto_refs_types_proto_rawDescGZIP() []byte {
	file_proto_refs_types_proto_rawDescOnce.Do(func() {
		file_proto_refs_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_refs_types_proto_rawDesc), len(file_proto_refs_types_proto_rawDesc)))
	})
	return file_proto_refs_types_proto_rawDescData
}

var file_proto_refs_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_refs_types_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_refs_types_proto_goTypes = []any{
	(SignatureScheme)(0),     // 0: neo.fs.v2.refs.SignatureScheme
	(ChecksumType)(0),        // 1: neo.fs.v2.refs.ChecksumType
	(*Address)(nil),          // 2: neo.fs.v2.refs.Address
	(*ObjectID)(nil),         // 3: neo.fs.v2.refs.ObjectID
	(*ContainerID)(nil),      // 4: neo.fs.v2.refs.ContainerID
	(*OwnerID)(nil),          // 5: neo.fs.v2.refs.OwnerID
	(*SubnetID)(nil),         // 6: neo.fs.v2.refs.SubnetID
	(*Version)(nil),          // 7: neo.fs.v2.refs.Version
	(*Signature)(nil),        // 8: neo.fs.v2.refs.Signature
	(*SignatureRFC6979)(nil), // 9: neo.fs.v2.refs.SignatureRFC6979
	(*Checksum)(nil),         // 10: neo.fs.v2.refs.Checksum
}
var file_proto_refs_types_proto_depIdxs = []int32{
	4, // 0: neo.fs.v2.refs.Address.container_id:type_name -> neo.fs.v2.refs.ContainerID
	3, // 1: neo.fs.v2.refs.Address.object_id:type_name -> neo.fs.v2.refs.ObjectID
	0, // 2: neo.fs.v2.refs.Signature.scheme:type_name -> neo.fs.v2.refs.SignatureScheme
	1, // 3: neo.fs.v2.refs.Checksum.type:type_name -> neo.fs.v2.refs.ChecksumType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_refs_types_proto_init() }
func file_proto_refs_types_proto_init() {
	if File_proto_refs_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_refs_types_proto_rawDesc), len(file_proto_refs_types_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_refs_types_proto_goTypes,
		DependencyIndexes: file_proto_refs_types_proto_depIdxs,
		EnumInfos:         file_proto_refs_types_proto_enumTypes,
		MessageInfos:      file_proto_refs_types_proto_msgTypes,
	}.Build()
	File_proto_refs_types_proto = out.File
	file_proto_refs_types_proto_goTypes = nil
	file_proto_refs_types_proto_depIdxs = nil
}
