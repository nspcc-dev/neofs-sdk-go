// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/object/types.proto

package object

import (
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	session "github.com/nspcc-dev/neofs-sdk-go/proto/session"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the object payload content. Only `REGULAR` type objects can be split,
// hence `TOMBSTONE`, `STORAGE_GROUP` and `LOCK` payload is limited by the maximum
// object size.
//
// String presentation of object type is the same as definition:
// * REGULAR
// * TOMBSTONE
// * STORAGE_GROUP
// * LOCK
// * LINK
type ObjectType int32

const (
	// Just a normal object
	ObjectType_REGULAR ObjectType = 0
	// Used internally to identify deleted objects
	ObjectType_TOMBSTONE ObjectType = 1
	// StorageGroup information. DEPRECATED: no longer used for audit since 2.18.
	ObjectType_STORAGE_GROUP ObjectType = 2
	// Object lock
	ObjectType_LOCK ObjectType = 3
	// Object that stores child object IDs for the split objects.
	ObjectType_LINK ObjectType = 4
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0: "REGULAR",
		1: "TOMBSTONE",
		2: "STORAGE_GROUP",
		3: "LOCK",
		4: "LINK",
	}
	ObjectType_value = map[string]int32{
		"REGULAR":       0,
		"TOMBSTONE":     1,
		"STORAGE_GROUP": 2,
		"LOCK":          3,
		"LINK":          4,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_object_types_proto_enumTypes[0].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_proto_object_types_proto_enumTypes[0]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{0}
}

// Type of match expression
type MatchType int32

const (
	// Unknown. Not used
	MatchType_MATCH_TYPE_UNSPECIFIED MatchType = 0
	// Full string match
	MatchType_STRING_EQUAL MatchType = 1
	// Full string mismatch
	MatchType_STRING_NOT_EQUAL MatchType = 2
	// Lack of key
	MatchType_NOT_PRESENT MatchType = 3
	// String prefix match
	MatchType_COMMON_PREFIX MatchType = 4
	// Numerical 'greater than'
	MatchType_NUM_GT MatchType = 5
	// Numerical 'greater or equal than'
	MatchType_NUM_GE MatchType = 6
	// Numerical 'less than'
	MatchType_NUM_LT MatchType = 7
	// Numerical 'less or equal than'
	MatchType_NUM_LE MatchType = 8
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "MATCH_TYPE_UNSPECIFIED",
		1: "STRING_EQUAL",
		2: "STRING_NOT_EQUAL",
		3: "NOT_PRESENT",
		4: "COMMON_PREFIX",
		5: "NUM_GT",
		6: "NUM_GE",
		7: "NUM_LT",
		8: "NUM_LE",
	}
	MatchType_value = map[string]int32{
		"MATCH_TYPE_UNSPECIFIED": 0,
		"STRING_EQUAL":           1,
		"STRING_NOT_EQUAL":       2,
		"NOT_PRESENT":            3,
		"COMMON_PREFIX":          4,
		"NUM_GT":                 5,
		"NUM_GE":                 6,
		"NUM_LT":                 7,
		"NUM_LE":                 8,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_object_types_proto_enumTypes[1].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_proto_object_types_proto_enumTypes[1]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{1}
}

// Filter structure checks if the object header field or the attribute content
// matches a value.
//
// If no filters are set, search request will return all objects of the
// container, including Regular object, Tombstones and Storage Group
// objects. Most human users expect to get only object they can directly
// work with. In that case, `$Object:ROOT` filter should be used.
//
// If `match_type` field is numerical, both `value` field and object
// attribute MUST be base-10 integers.
//
// By default `key` field refers to the corresponding object's `Attribute`.
// Some Object's header fields can also be accessed by adding `$Object:`
// prefix to the name. Here is the list of fields available via this prefix:
//
//   - $Object:version \
//     version
//   - $Object:ownerID \
//     owner_id
//   - $Object:creationEpoch \
//     creation_epoch
//   - $Object:payloadLength \
//     payload_length
//   - $Object:payloadHash \
//     payload_hash
//   - $Object:objectType \
//     object_type
//   - $Object:homomorphicHash \
//     homomorphic_hash
//   - $Object:split.parent \
//     object_id of parent
//   - $Object:split.splitID \
//     16 byte UUIDv4 used to identify the split object hierarchy parts
//   - $Object:split.first \
//     object_id of the first part in split chain; non-acceptable for deprecated V1 split scheme
//
// There are some well-known filter aliases to match objects by certain
// properties:
//
//   - $Object:ROOT \
//     Returns only `REGULAR` type objects that are not split or that are the top
//     level root objects in a split hierarchy. This includes objects not
//     present physically, like large objects split into smaller objects
//     without a separate top-level root object. Objects of other types like
//     StorageGroups and Tombstones will not be shown. This filter may be
//     useful for listing objects like `ls` command of some virtual file
//     system. This filter is activated if the `key` exists, disregarding the
//     value and matcher type.
//   - $Object:PHY \
//     Returns only objects physically stored in the system. This filter is
//     activated if the `key` exists, disregarding the value and matcher type.
//
// Following filters are deprecated:
//
//   - $Object:objectID \
//     object_id
//   - $Object:containerID \
//     container_id
//
// Note: using filters with a key with prefix `$Object:` and match type
// `NOT_PRESENT `is not recommended since this is not a cross-version approach.
// Behavior when processing this kind of filters is undefined.
type SearchFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Match type to use
	MatchType MatchType `protobuf:"varint,1,opt,name=match_type,json=matchType,proto3,enum=neo.fs.v2.object.MatchType" json:"match_type,omitempty"`
	// Attribute or Header fields to match
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Value to match
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchFilter) Reset() {
	*x = SearchFilter{}
	mi := &file_proto_object_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFilter) ProtoMessage() {}

func (x *SearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_object_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFilter.ProtoReflect.Descriptor instead.
func (*SearchFilter) Descriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{0}
}

func (x *SearchFilter) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MATCH_TYPE_UNSPECIFIED
}

func (x *SearchFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SearchFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Short header fields
//
// DEPRECATED. It is not supported in practice and should not be used. Use full
// Header instead.
type ShortHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Object format version. Effectively, the version of API library used to
	// create particular object.
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Epoch when the object was created
	CreationEpoch uint64 `protobuf:"varint,2,opt,name=creation_epoch,json=creationEpoch,proto3" json:"creation_epoch,omitempty"`
	// Object's owner
	OwnerId *refs.OwnerID `protobuf:"bytes,3,opt,name=owner_id,json=ownerID,proto3" json:"owner_id,omitempty"`
	// Type of the object payload content
	ObjectType ObjectType `protobuf:"varint,4,opt,name=object_type,json=objectType,proto3,enum=neo.fs.v2.object.ObjectType" json:"object_type,omitempty"`
	// Size of payload in bytes.
	// `0xFFFFFFFFFFFFFFFF` means `payload_length` is unknown
	PayloadLength uint64 `protobuf:"varint,5,opt,name=payload_length,json=payloadLength,proto3" json:"payload_length,omitempty"`
	// SHA256 hash of payload bytes.
	PayloadHash *refs.Checksum `protobuf:"bytes,6,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"`
	// Homomorphic hash of the object payload (Tillich-Zemor).
	HomomorphicHash *refs.Checksum `protobuf:"bytes,7,opt,name=homomorphic_hash,json=homomorphicHash,proto3" json:"homomorphic_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShortHeader) Reset() {
	*x = ShortHeader{}
	mi := &file_proto_object_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShortHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortHeader) ProtoMessage() {}

func (x *ShortHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_object_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortHeader.ProtoReflect.Descriptor instead.
func (*ShortHeader) Descriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{1}
}

func (x *ShortHeader) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ShortHeader) GetCreationEpoch() uint64 {
	if x != nil {
		return x.CreationEpoch
	}
	return 0
}

func (x *ShortHeader) GetOwnerId() *refs.OwnerID {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *ShortHeader) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_REGULAR
}

func (x *ShortHeader) GetPayloadLength() uint64 {
	if x != nil {
		return x.PayloadLength
	}
	return 0
}

func (x *ShortHeader) GetPayloadHash() *refs.Checksum {
	if x != nil {
		return x.PayloadHash
	}
	return nil
}

func (x *ShortHeader) GetHomomorphicHash() *refs.Checksum {
	if x != nil {
		return x.HomomorphicHash
	}
	return nil
}

// Object Header
type Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Object format version. Effectively, the version of API library used to
	// create particular object
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Object's container
	ContainerId *refs.ContainerID `protobuf:"bytes,2,opt,name=container_id,json=containerID,proto3" json:"container_id,omitempty"`
	// Object's owner
	OwnerId *refs.OwnerID `protobuf:"bytes,3,opt,name=owner_id,json=ownerID,proto3" json:"owner_id,omitempty"`
	// Object creation Epoch
	CreationEpoch uint64 `protobuf:"varint,4,opt,name=creation_epoch,json=creationEpoch,proto3" json:"creation_epoch,omitempty"`
	// Size of payload in bytes.
	// `0xFFFFFFFFFFFFFFFF` means `payload_length` is unknown.
	PayloadLength uint64 `protobuf:"varint,5,opt,name=payload_length,json=payloadLength,proto3" json:"payload_length,omitempty"`
	// SHA256 hash of payload bytes
	PayloadHash *refs.Checksum `protobuf:"bytes,6,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"`
	// Type of the object payload content
	ObjectType ObjectType `protobuf:"varint,7,opt,name=object_type,json=objectType,proto3,enum=neo.fs.v2.object.ObjectType" json:"object_type,omitempty"`
	// Homomorphic hash of the object payload (Tillich-Zemor).
	HomomorphicHash *refs.Checksum `protobuf:"bytes,8,opt,name=homomorphic_hash,json=homomorphicHash,proto3" json:"homomorphic_hash,omitempty"`
	// Session token, if it was used during Object creation. Need it to verify
	// integrity and authenticity out of Request scope.
	SessionToken *session.SessionToken `protobuf:"bytes,9,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	// User-defined object attributes. Attributes vary in length from object to
	// object, so keep an eye on the entire Header limit depending on the context.
	Attributes []*Header_Attribute `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Position of the object in the split hierarchy
	Split         *Header_Split `protobuf:"bytes,11,opt,name=split,proto3" json:"split,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_proto_object_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_proto_object_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{2}
}

func (x *Header) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Header) GetContainerId() *refs.ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *Header) GetOwnerId() *refs.OwnerID {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *Header) GetCreationEpoch() uint64 {
	if x != nil {
		return x.CreationEpoch
	}
	return 0
}

func (x *Header) GetPayloadLength() uint64 {
	if x != nil {
		return x.PayloadLength
	}
	return 0
}

func (x *Header) GetPayloadHash() *refs.Checksum {
	if x != nil {
		return x.PayloadHash
	}
	return nil
}

func (x *Header) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_REGULAR
}

func (x *Header) GetHomomorphicHash() *refs.Checksum {
	if x != nil {
		return x.HomomorphicHash
	}
	return nil
}

func (x *Header) GetSessionToken() *session.SessionToken {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *Header) GetAttributes() []*Header_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Header) GetSplit() *Header_Split {
	if x != nil {
		return x.Split
	}
	return nil
}

// Object structure. Object is immutable and content-addressed. It means
// `ObjectID` will change if the header or the payload changes. It's calculated as a
// hash of header field which contains hash of the object's payload.
//
// For non-regular object types payload format depends on object type specified
// in the header.
type Object struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Object's unique identifier.
	ObjectId *refs.ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectID,proto3" json:"object_id,omitempty"`
	// Signed object_id
	Signature *refs.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Object metadata headers
	Header *Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	// Payload bytes
	Payload       []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Object) Reset() {
	*x = Object{}
	mi := &file_proto_object_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_proto_object_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{3}
}

func (x *Object) GetObjectId() *refs.ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *Object) GetSignature() *refs.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Object) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Object) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Meta information of split hierarchy for object assembly. With the last part
// one can traverse linked list of split hierarchy back to the first part and
// assemble the original object. With a linking object one can assemble an object
// right from the object parts.
type SplitInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DEPRECATED. Was used as an identifier of a split chain. Use the first
	// part ID instead.
	// 16 byte UUID used to identify the split object hierarchy parts.
	SplitId []byte `protobuf:"bytes,1,opt,name=split_id,json=splitId,proto3" json:"split_id,omitempty"`
	// The identifier of the last object in split hierarchy parts. It contains
	// split header with the original object header.
	LastPart *refs.ObjectID `protobuf:"bytes,2,opt,name=last_part,json=lastPart,proto3" json:"last_part,omitempty"`
	// The identifier of a linking object for split hierarchy parts. It contains
	// split header with the original object header and a sorted list of
	// object parts.
	Link *refs.ObjectID `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// Identifier of the first part of the origin object. Known to all the split
	// parts except the first one. Identifies the split and allows to differ them.
	FirstPart     *refs.ObjectID `protobuf:"bytes,4,opt,name=first_part,json=firstPart,proto3" json:"first_part,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitInfo) Reset() {
	*x = SplitInfo{}
	mi := &file_proto_object_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitInfo) ProtoMessage() {}

func (x *SplitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_object_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitInfo.ProtoReflect.Descriptor instead.
func (*SplitInfo) Descriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{4}
}

func (x *SplitInfo) GetSplitId() []byte {
	if x != nil {
		return x.SplitId
	}
	return nil
}

func (x *SplitInfo) GetLastPart() *refs.ObjectID {
	if x != nil {
		return x.LastPart
	}
	return nil
}

func (x *SplitInfo) GetLink() *refs.ObjectID {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *SplitInfo) GetFirstPart() *refs.ObjectID {
	if x != nil {
		return x.FirstPart
	}
	return nil
}

// `Attribute` is a user-defined Key-Value metadata pair attached to an
// object.
//
// Key name must be an object-unique valid UTF-8 string. Value can't be empty.
// Objects with duplicated attribute names or attributes with empty values
// will be considered invalid. Keys and values can't contain zero bytes as
// well.
//
// There are some "well-known" attributes starting with `__NEOFS__` prefix
// that affect system behaviour:
//
//   - __NEOFS__EXPIRATION_EPOCH \
//     Tells GC to delete object after that epoch (but object is available
//     throughout the epoch specified in this attribute).
//   - __NEOFS__ASSOCIATE \
//     Associated object. For TOMBSTONE, LOCK object types it defines object
//     to delete and to lock accordingly. For objects of 2.18+ API version, it
//     is the only way to delete/lock objects. It MUST be a single stringified
//     (according to [refs.ObjectID] message) object ID with no leading or
//     trailing spaces.
//   - __NEOFS__TICK_EPOCH \
//     Decimal number that defines what epoch must produce
//     object notification with UTF-8 object address in a
//     body (`0` value produces notification right after
//     object put).
//     DEPRECATED: attribute ignored by servers.
//   - __NEOFS__TICK_TOPIC \
//     UTF-8 string topic ID that is used for object notification.
//     DEPRECATED: attribute ignored by servers.
//   - __NEOFS__EC_RULE_IDX \
//     Index of EC rule in container's `PlacementPolicy.ec_rules` according to
//     which the part was created. Base-10 integer.
//   - __NEOFS__EC_PART_IDX \
//     Index in the EC parts into which the parent object is divided according
//     to `__NEOFS__EC_RULE_IDX` EC rule. Base-10 integer.
//
// And some well-known attributes used by applications only:
//
//   - Name \
//     Human-friendly name
//   - FileName \
//     File name to be associated with the object on saving
//   - FilePath \
//     Full path to be associated with the object on saving. Should start with a
//     '/' and use '/' as a delimiting symbol. Trailing '/' should be
//     interpreted as a virtual directory marker. If an object has conflicting
//     FilePath and FileName, FilePath should have higher priority, because it
//     is used to construct the directory tree. FilePath with trailing '/' and
//     non-empty FileName attribute should not be used together.
//   - Timestamp \
//     User-defined local time of object creation in Unix Timestamp format
//   - Content-Type \
//     MIME Content Type of object's payload
//
// For detailed description of each well-known attribute please see the
// corresponding section in NeoFS Technical Specification.
type Header_Attribute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// string key to the object attribute
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// string value of the object attribute
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header_Attribute) Reset() {
	*x = Header_Attribute{}
	mi := &file_proto_object_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header_Attribute) ProtoMessage() {}

func (x *Header_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_object_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header_Attribute.ProtoReflect.Descriptor instead.
func (*Header_Attribute) Descriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Header_Attribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header_Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Bigger objects can be split into a chain of smaller objects. Information
// about inter-dependencies between spawned objects and how to re-construct
// the original one is in the `Split` headers. Parent and children objects
// must be within the same container.
type Header_Split struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of the origin object. If the origin object is split to comply
	// with the object size limit, `parent` is known only to the minor child.
	Parent *refs.ObjectID `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Identifier of the left split neighbor
	Previous *refs.ObjectID `protobuf:"bytes,2,opt,name=previous,proto3" json:"previous,omitempty"`
	// `signature` field of the parent object. Used to reconstruct parent.
	ParentSignature *refs.Signature `protobuf:"bytes,3,opt,name=parent_signature,json=parentSignature,proto3" json:"parent_signature,omitempty"`
	// `header` field of the parent object. Used to reconstruct parent.
	ParentHeader *Header `protobuf:"bytes,4,opt,name=parent_header,json=parentHeader,proto3" json:"parent_header,omitempty"`
	// DEPRECATED. Was used before creating the separate LINK object type. Keep
	// child objects list in the LINK object's payload.
	// List of identifiers of the objects generated by splitting current one.
	Children []*refs.ObjectID `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	// DEPRECATED. Was used as an identifier of a split chain. Use the first
	// part ID instead.
	// 16 byte UUIDv4 used to identify the split object hierarchy parts. Must be
	// unique inside container. All objects participating in the split must have
	// the same `split_id` value.
	SplitId []byte `protobuf:"bytes,6,opt,name=split_id,json=splitID,proto3" json:"split_id,omitempty"`
	// Identifier of the first part of the origin object. Known to all the split
	// parts except the first one. Identifies the split and allows to differ them.
	First         *refs.ObjectID `protobuf:"bytes,7,opt,name=first,proto3" json:"first,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header_Split) Reset() {
	*x = Header_Split{}
	mi := &file_proto_object_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header_Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header_Split) ProtoMessage() {}

func (x *Header_Split) ProtoReflect() protoreflect.Message {
	mi := &file_proto_object_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header_Split.ProtoReflect.Descriptor instead.
func (*Header_Split) Descriptor() ([]byte, []int) {
	return file_proto_object_types_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Header_Split) GetParent() *refs.ObjectID {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Header_Split) GetPrevious() *refs.ObjectID {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *Header_Split) GetParentSignature() *refs.Signature {
	if x != nil {
		return x.ParentSignature
	}
	return nil
}

func (x *Header_Split) GetParentHeader() *Header {
	if x != nil {
		return x.ParentHeader
	}
	return nil
}

func (x *Header_Split) GetChildren() []*refs.ObjectID {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Header_Split) GetSplitId() []byte {
	if x != nil {
		return x.SplitId
	}
	return nil
}

func (x *Header_Split) GetFirst() *refs.ObjectID {
	if x != nil {
		return x.First
	}
	return nil
}

var File_proto_object_types_proto protoreflect.FileDescriptor

const file_proto_object_types_proto_rawDesc = "" +
	"\n" +
	"\x18proto/object/types.proto\x12\x10neo.fs.v2.object\x1a\x16proto/refs/types.proto\x1a\x19proto/session/types.proto\"r\n" +
	"\fSearchFilter\x12:\n" +
	"\n" +
	"match_type\x18\x01 \x01(\x0e2\x1b.neo.fs.v2.object.MatchTypeR\tmatchType\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\x83\x03\n" +
	"\vShortHeader\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x12%\n" +
	"\x0ecreation_epoch\x18\x02 \x01(\x04R\rcreationEpoch\x122\n" +
	"\bowner_id\x18\x03 \x01(\v2\x17.neo.fs.v2.refs.OwnerIDR\aownerID\x12=\n" +
	"\vobject_type\x18\x04 \x01(\x0e2\x1c.neo.fs.v2.object.ObjectTypeR\n" +
	"objectType\x12%\n" +
	"\x0epayload_length\x18\x05 \x01(\x04R\rpayloadLength\x12;\n" +
	"\fpayload_hash\x18\x06 \x01(\v2\x18.neo.fs.v2.refs.ChecksumR\vpayloadHash\x12C\n" +
	"\x10homomorphic_hash\x18\a \x01(\v2\x18.neo.fs.v2.refs.ChecksumR\x0fhomomorphicHash\"\xab\b\n" +
	"\x06Header\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x12>\n" +
	"\fcontainer_id\x18\x02 \x01(\v2\x1b.neo.fs.v2.refs.ContainerIDR\vcontainerID\x122\n" +
	"\bowner_id\x18\x03 \x01(\v2\x17.neo.fs.v2.refs.OwnerIDR\aownerID\x12%\n" +
	"\x0ecreation_epoch\x18\x04 \x01(\x04R\rcreationEpoch\x12%\n" +
	"\x0epayload_length\x18\x05 \x01(\x04R\rpayloadLength\x12;\n" +
	"\fpayload_hash\x18\x06 \x01(\v2\x18.neo.fs.v2.refs.ChecksumR\vpayloadHash\x12=\n" +
	"\vobject_type\x18\a \x01(\x0e2\x1c.neo.fs.v2.object.ObjectTypeR\n" +
	"objectType\x12C\n" +
	"\x10homomorphic_hash\x18\b \x01(\v2\x18.neo.fs.v2.refs.ChecksumR\x0fhomomorphicHash\x12D\n" +
	"\rsession_token\x18\t \x01(\v2\x1f.neo.fs.v2.session.SessionTokenR\fsessionToken\x12B\n" +
	"\n" +
	"attributes\x18\n" +
	" \x03(\v2\".neo.fs.v2.object.Header.AttributeR\n" +
	"attributes\x124\n" +
	"\x05split\x18\v \x01(\v2\x1e.neo.fs.v2.object.Header.SplitR\x05split\x1a3\n" +
	"\tAttribute\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1a\xf5\x02\n" +
	"\x05Split\x120\n" +
	"\x06parent\x18\x01 \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\x06parent\x124\n" +
	"\bprevious\x18\x02 \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\bprevious\x12D\n" +
	"\x10parent_signature\x18\x03 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\x0fparentSignature\x12=\n" +
	"\rparent_header\x18\x04 \x01(\v2\x18.neo.fs.v2.object.HeaderR\fparentHeader\x124\n" +
	"\bchildren\x18\x05 \x03(\v2\x18.neo.fs.v2.refs.ObjectIDR\bchildren\x12\x19\n" +
	"\bsplit_id\x18\x06 \x01(\fR\asplitID\x12.\n" +
	"\x05first\x18\a \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\x05first\"\xc4\x01\n" +
	"\x06Object\x125\n" +
	"\tobject_id\x18\x01 \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\bobjectID\x127\n" +
	"\tsignature\x18\x02 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\tsignature\x120\n" +
	"\x06header\x18\x03 \x01(\v2\x18.neo.fs.v2.object.HeaderR\x06header\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload\"\xc4\x01\n" +
	"\tSplitInfo\x12\x19\n" +
	"\bsplit_id\x18\x01 \x01(\fR\asplitId\x125\n" +
	"\tlast_part\x18\x02 \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\blastPart\x12,\n" +
	"\x04link\x18\x03 \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\x04link\x127\n" +
	"\n" +
	"first_part\x18\x04 \x01(\v2\x18.neo.fs.v2.refs.ObjectIDR\tfirstPart*O\n" +
	"\n" +
	"ObjectType\x12\v\n" +
	"\aREGULAR\x10\x00\x12\r\n" +
	"\tTOMBSTONE\x10\x01\x12\x11\n" +
	"\rSTORAGE_GROUP\x10\x02\x12\b\n" +
	"\x04LOCK\x10\x03\x12\b\n" +
	"\x04LINK\x10\x04*\xa3\x01\n" +
	"\tMatchType\x12\x1a\n" +
	"\x16MATCH_TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fSTRING_EQUAL\x10\x01\x12\x14\n" +
	"\x10STRING_NOT_EQUAL\x10\x02\x12\x0f\n" +
	"\vNOT_PRESENT\x10\x03\x12\x11\n" +
	"\rCOMMON_PREFIX\x10\x04\x12\n" +
	"\n" +
	"\x06NUM_GT\x10\x05\x12\n" +
	"\n" +
	"\x06NUM_GE\x10\x06\x12\n" +
	"\n" +
	"\x06NUM_LT\x10\a\x12\n" +
	"\n" +
	"\x06NUM_LE\x10\bBMZ.github.com/nspcc-dev/neofs-sdk-go/proto/object\xaa\x02\x1aNeo.FileStorage.API.Objectb\x06proto3"

var (
	file_proto_object_types_proto_rawDescOnce sync.Once
	file_proto_object_types_proto_rawDescData []byte
)

func file_proto_object_types_proto_rawDescGZIP() []byte {
	file_proto_object_types_proto_rawDescOnce.Do(func() {
		file_proto_object_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_object_types_proto_rawDesc), len(file_proto_object_types_proto_rawDesc)))
	})
	return file_proto_object_types_proto_rawDescData
}

var file_proto_object_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_object_types_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_object_types_proto_goTypes = []any{
	(ObjectType)(0),              // 0: neo.fs.v2.object.ObjectType
	(MatchType)(0),               // 1: neo.fs.v2.object.MatchType
	(*SearchFilter)(nil),         // 2: neo.fs.v2.object.SearchFilter
	(*ShortHeader)(nil),          // 3: neo.fs.v2.object.ShortHeader
	(*Header)(nil),               // 4: neo.fs.v2.object.Header
	(*Object)(nil),               // 5: neo.fs.v2.object.Object
	(*SplitInfo)(nil),            // 6: neo.fs.v2.object.SplitInfo
	(*Header_Attribute)(nil),     // 7: neo.fs.v2.object.Header.Attribute
	(*Header_Split)(nil),         // 8: neo.fs.v2.object.Header.Split
	(*refs.Version)(nil),         // 9: neo.fs.v2.refs.Version
	(*refs.OwnerID)(nil),         // 10: neo.fs.v2.refs.OwnerID
	(*refs.Checksum)(nil),        // 11: neo.fs.v2.refs.Checksum
	(*refs.ContainerID)(nil),     // 12: neo.fs.v2.refs.ContainerID
	(*session.SessionToken)(nil), // 13: neo.fs.v2.session.SessionToken
	(*refs.ObjectID)(nil),        // 14: neo.fs.v2.refs.ObjectID
	(*refs.Signature)(nil),       // 15: neo.fs.v2.refs.Signature
}
var file_proto_object_types_proto_depIdxs = []int32{
	1,  // 0: neo.fs.v2.object.SearchFilter.match_type:type_name -> neo.fs.v2.object.MatchType
	9,  // 1: neo.fs.v2.object.ShortHeader.version:type_name -> neo.fs.v2.refs.Version
	10, // 2: neo.fs.v2.object.ShortHeader.owner_id:type_name -> neo.fs.v2.refs.OwnerID
	0,  // 3: neo.fs.v2.object.ShortHeader.object_type:type_name -> neo.fs.v2.object.ObjectType
	11, // 4: neo.fs.v2.object.ShortHeader.payload_hash:type_name -> neo.fs.v2.refs.Checksum
	11, // 5: neo.fs.v2.object.ShortHeader.homomorphic_hash:type_name -> neo.fs.v2.refs.Checksum
	9,  // 6: neo.fs.v2.object.Header.version:type_name -> neo.fs.v2.refs.Version
	12, // 7: neo.fs.v2.object.Header.container_id:type_name -> neo.fs.v2.refs.ContainerID
	10, // 8: neo.fs.v2.object.Header.owner_id:type_name -> neo.fs.v2.refs.OwnerID
	11, // 9: neo.fs.v2.object.Header.payload_hash:type_name -> neo.fs.v2.refs.Checksum
	0,  // 10: neo.fs.v2.object.Header.object_type:type_name -> neo.fs.v2.object.ObjectType
	11, // 11: neo.fs.v2.object.Header.homomorphic_hash:type_name -> neo.fs.v2.refs.Checksum
	13, // 12: neo.fs.v2.object.Header.session_token:type_name -> neo.fs.v2.session.SessionToken
	7,  // 13: neo.fs.v2.object.Header.attributes:type_name -> neo.fs.v2.object.Header.Attribute
	8,  // 14: neo.fs.v2.object.Header.split:type_name -> neo.fs.v2.object.Header.Split
	14, // 15: neo.fs.v2.object.Object.object_id:type_name -> neo.fs.v2.refs.ObjectID
	15, // 16: neo.fs.v2.object.Object.signature:type_name -> neo.fs.v2.refs.Signature
	4,  // 17: neo.fs.v2.object.Object.header:type_name -> neo.fs.v2.object.Header
	14, // 18: neo.fs.v2.object.SplitInfo.last_part:type_name -> neo.fs.v2.refs.ObjectID
	14, // 19: neo.fs.v2.object.SplitInfo.link:type_name -> neo.fs.v2.refs.ObjectID
	14, // 20: neo.fs.v2.object.SplitInfo.first_part:type_name -> neo.fs.v2.refs.ObjectID
	14, // 21: neo.fs.v2.object.Header.Split.parent:type_name -> neo.fs.v2.refs.ObjectID
	14, // 22: neo.fs.v2.object.Header.Split.previous:type_name -> neo.fs.v2.refs.ObjectID
	15, // 23: neo.fs.v2.object.Header.Split.parent_signature:type_name -> neo.fs.v2.refs.Signature
	4,  // 24: neo.fs.v2.object.Header.Split.parent_header:type_name -> neo.fs.v2.object.Header
	14, // 25: neo.fs.v2.object.Header.Split.children:type_name -> neo.fs.v2.refs.ObjectID
	14, // 26: neo.fs.v2.object.Header.Split.first:type_name -> neo.fs.v2.refs.ObjectID
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_proto_object_types_proto_init() }
func file_proto_object_types_proto_init() {
	if File_proto_object_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_object_types_proto_rawDesc), len(file_proto_object_types_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_object_types_proto_goTypes,
		DependencyIndexes: file_proto_object_types_proto_depIdxs,
		EnumInfos:         file_proto_object_types_proto_enumTypes,
		MessageInfos:      file_proto_object_types_proto_msgTypes,
	}.Build()
	File_proto_object_types_proto = out.File
	file_proto_object_types_proto_goTypes = nil
	file_proto_object_types_proto_depIdxs = nil
}
