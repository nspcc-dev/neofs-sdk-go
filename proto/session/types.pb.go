// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/session/types.proto

package session

import (
	acl "github.com/nspcc-dev/neofs-sdk-go/proto/acl"
	refs "github.com/nspcc-dev/neofs-sdk-go/proto/refs"
	status "github.com/nspcc-dev/neofs-sdk-go/proto/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Object request verbs
type ObjectSessionContext_Verb int32

const (
	// Unknown verb
	ObjectSessionContext_VERB_UNSPECIFIED ObjectSessionContext_Verb = 0
	// Refers to object.Put RPC call
	ObjectSessionContext_PUT ObjectSessionContext_Verb = 1
	// Refers to object.Get RPC call
	ObjectSessionContext_GET ObjectSessionContext_Verb = 2
	// Refers to object.Head RPC call
	ObjectSessionContext_HEAD ObjectSessionContext_Verb = 3
	// Refers to object.Search RPC call
	ObjectSessionContext_SEARCH ObjectSessionContext_Verb = 4
	// Refers to object.Delete RPC call
	ObjectSessionContext_DELETE ObjectSessionContext_Verb = 5
	// Refers to object.GetRange RPC call
	ObjectSessionContext_RANGE ObjectSessionContext_Verb = 6
	// Refers to object.GetRangeHash RPC call
	ObjectSessionContext_RANGEHASH ObjectSessionContext_Verb = 7
)

// Enum value maps for ObjectSessionContext_Verb.
var (
	ObjectSessionContext_Verb_name = map[int32]string{
		0: "VERB_UNSPECIFIED",
		1: "PUT",
		2: "GET",
		3: "HEAD",
		4: "SEARCH",
		5: "DELETE",
		6: "RANGE",
		7: "RANGEHASH",
	}
	ObjectSessionContext_Verb_value = map[string]int32{
		"VERB_UNSPECIFIED": 0,
		"PUT":              1,
		"GET":              2,
		"HEAD":             3,
		"SEARCH":           4,
		"DELETE":           5,
		"RANGE":            6,
		"RANGEHASH":        7,
	}
)

func (x ObjectSessionContext_Verb) Enum() *ObjectSessionContext_Verb {
	p := new(ObjectSessionContext_Verb)
	*p = x
	return p
}

func (x ObjectSessionContext_Verb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectSessionContext_Verb) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_session_types_proto_enumTypes[0].Descriptor()
}

func (ObjectSessionContext_Verb) Type() protoreflect.EnumType {
	return &file_proto_session_types_proto_enumTypes[0]
}

func (x ObjectSessionContext_Verb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectSessionContext_Verb.Descriptor instead.
func (ObjectSessionContext_Verb) EnumDescriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{0, 0}
}

// Container request verbs
type ContainerSessionContext_Verb int32

const (
	// Unknown verb
	ContainerSessionContext_VERB_UNSPECIFIED ContainerSessionContext_Verb = 0
	// Refers to container.Put RPC call
	ContainerSessionContext_PUT ContainerSessionContext_Verb = 1
	// Refers to container.Delete RPC call
	ContainerSessionContext_DELETE ContainerSessionContext_Verb = 2
	// Refers to container.SetExtendedACL RPC call
	ContainerSessionContext_SETEACL ContainerSessionContext_Verb = 3
)

// Enum value maps for ContainerSessionContext_Verb.
var (
	ContainerSessionContext_Verb_name = map[int32]string{
		0: "VERB_UNSPECIFIED",
		1: "PUT",
		2: "DELETE",
		3: "SETEACL",
	}
	ContainerSessionContext_Verb_value = map[string]int32{
		"VERB_UNSPECIFIED": 0,
		"PUT":              1,
		"DELETE":           2,
		"SETEACL":          3,
	}
)

func (x ContainerSessionContext_Verb) Enum() *ContainerSessionContext_Verb {
	p := new(ContainerSessionContext_Verb)
	*p = x
	return p
}

func (x ContainerSessionContext_Verb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerSessionContext_Verb) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_session_types_proto_enumTypes[1].Descriptor()
}

func (ContainerSessionContext_Verb) Type() protoreflect.EnumType {
	return &file_proto_session_types_proto_enumTypes[1]
}

func (x ContainerSessionContext_Verb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerSessionContext_Verb.Descriptor instead.
func (ContainerSessionContext_Verb) EnumDescriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{1, 0}
}

// Context information for Session Tokens related to ObjectService requests
type ObjectSessionContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of request for which the token is issued
	Verb ObjectSessionContext_Verb `protobuf:"varint,1,opt,name=verb,proto3,enum=neo.fs.v2.session.ObjectSessionContext_Verb" json:"verb,omitempty"`
	// Object session target. MUST be correctly formed and set. If `objects`
	// field is not empty, then the session applies only to these elements,
	// otherwise, to all objects from the specified container.
	Target        *ObjectSessionContext_Target `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectSessionContext) Reset() {
	*x = ObjectSessionContext{}
	mi := &file_proto_session_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSessionContext) ProtoMessage() {}

func (x *ObjectSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSessionContext.ProtoReflect.Descriptor instead.
func (*ObjectSessionContext) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectSessionContext) GetVerb() ObjectSessionContext_Verb {
	if x != nil {
		return x.Verb
	}
	return ObjectSessionContext_VERB_UNSPECIFIED
}

func (x *ObjectSessionContext) GetTarget() *ObjectSessionContext_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Context information for Session Tokens related to ContainerService requests.
type ContainerSessionContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of request for which the token is issued
	Verb ContainerSessionContext_Verb `protobuf:"varint,1,opt,name=verb,proto3,enum=neo.fs.v2.session.ContainerSessionContext_Verb" json:"verb,omitempty"`
	// Spreads the action to all owner containers.
	// If set, container_id field is ignored.
	Wildcard bool `protobuf:"varint,2,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
	// Particular container to which the action applies.
	// Ignored if wildcard flag is set.
	ContainerId   *refs.ContainerID `protobuf:"bytes,3,opt,name=container_id,json=containerID,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerSessionContext) Reset() {
	*x = ContainerSessionContext{}
	mi := &file_proto_session_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerSessionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerSessionContext) ProtoMessage() {}

func (x *ContainerSessionContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerSessionContext.ProtoReflect.Descriptor instead.
func (*ContainerSessionContext) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerSessionContext) GetVerb() ContainerSessionContext_Verb {
	if x != nil {
		return x.Verb
	}
	return ContainerSessionContext_VERB_UNSPECIFIED
}

func (x *ContainerSessionContext) GetWildcard() bool {
	if x != nil {
		return x.Wildcard
	}
	return false
}

func (x *ContainerSessionContext) GetContainerId() *refs.ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

// NeoFS Session Token.
type SessionToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Session Token contains the proof of trust between peers to be attached in
	// requests for further verification. Please see corresponding section of
	// NeoFS Technical Specification for details.
	Body *SessionToken_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Signature of `SessionToken` information
	Signature     *refs.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionToken) Reset() {
	*x = SessionToken{}
	mi := &file_proto_session_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken) ProtoMessage() {}

func (x *SessionToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken.ProtoReflect.Descriptor instead.
func (*SessionToken) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{2}
}

func (x *SessionToken) GetBody() *SessionToken_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *SessionToken) GetSignature() *refs.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Extended headers for Request/Response. They may contain any user-defined headers
// to be interpreted on application level.
//
// Key name must be a unique valid UTF-8 string. Value can't be empty. Requests or
// Responses with duplicated header names or headers with empty values will be
// considered invalid.
//
// There are some "well-known" headers starting with `__NEOFS__` prefix that
// affect system behaviour:
//
//   - __NEOFS__NETMAP_EPOCH \
//     Netmap epoch to use for object placement calculation. The `value` is string
//     encoded `uint64` in decimal presentation. If set to '0' or not set, the
//     current epoch only will be used. DEPRECATED: header ignored by servers.
//   - __NEOFS__NETMAP_LOOKUP_DEPTH \
//     If object can't be found using current epoch's netmap, this header limits
//     how many past epochs the node can look up through. The `value` is string
//     encoded `uint64` in decimal presentation. If set to '0' or not set, only the
//     current epoch will be used. DEPRECATED: header ignored by servers.
type XHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key of the X-Header
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value of the X-Header
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XHeader) Reset() {
	*x = XHeader{}
	mi := &file_proto_session_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XHeader) ProtoMessage() {}

func (x *XHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XHeader.ProtoReflect.Descriptor instead.
func (*XHeader) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{3}
}

func (x *XHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *XHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Meta information attached to the request. When forwarded between peers,
// request meta headers are folded in matryoshka style.
type RequestMetaHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer's API version used
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Peer's local epoch number. Set to 0 if unknown.
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Maximum number of intermediate nodes in the request route
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Request X-Headers
	XHeaders []*XHeader `protobuf:"bytes,4,rep,name=x_headers,json=xHeaders,proto3" json:"x_headers,omitempty"`
	// Session token within which the request is sent
	SessionToken *SessionToken `protobuf:"bytes,5,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	// `BearerToken` with eACL overrides for the request
	BearerToken *acl.BearerToken `protobuf:"bytes,6,opt,name=bearer_token,json=bearerToken,proto3" json:"bearer_token,omitempty"`
	// `RequestMetaHeader` of the origin request
	Origin *RequestMetaHeader `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	// NeoFS network magic. Must match the value for the network
	// that the server belongs to.
	MagicNumber   uint64 `protobuf:"varint,8,opt,name=magic_number,json=magicNumber,proto3" json:"magic_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestMetaHeader) Reset() {
	*x = RequestMetaHeader{}
	mi := &file_proto_session_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestMetaHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMetaHeader) ProtoMessage() {}

func (x *RequestMetaHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMetaHeader.ProtoReflect.Descriptor instead.
func (*RequestMetaHeader) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{4}
}

func (x *RequestMetaHeader) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *RequestMetaHeader) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *RequestMetaHeader) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RequestMetaHeader) GetXHeaders() []*XHeader {
	if x != nil {
		return x.XHeaders
	}
	return nil
}

func (x *RequestMetaHeader) GetSessionToken() *SessionToken {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *RequestMetaHeader) GetBearerToken() *acl.BearerToken {
	if x != nil {
		return x.BearerToken
	}
	return nil
}

func (x *RequestMetaHeader) GetOrigin() *RequestMetaHeader {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *RequestMetaHeader) GetMagicNumber() uint64 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

// Information about the response
type ResponseMetaHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Peer's API version used
	Version *refs.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Peer's local epoch number
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Maximum number of intermediate nodes in the request route
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Response X-Headers
	XHeaders []*XHeader `protobuf:"bytes,4,rep,name=x_headers,json=xHeaders,proto3" json:"x_headers,omitempty"`
	// `ResponseMetaHeader` of the origin request
	Origin *ResponseMetaHeader `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// Status return
	Status        *status.Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseMetaHeader) Reset() {
	*x = ResponseMetaHeader{}
	mi := &file_proto_session_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseMetaHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMetaHeader) ProtoMessage() {}

func (x *ResponseMetaHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMetaHeader.ProtoReflect.Descriptor instead.
func (*ResponseMetaHeader) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseMetaHeader) GetVersion() *refs.Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ResponseMetaHeader) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ResponseMetaHeader) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *ResponseMetaHeader) GetXHeaders() []*XHeader {
	if x != nil {
		return x.XHeaders
	}
	return nil
}

func (x *ResponseMetaHeader) GetOrigin() *ResponseMetaHeader {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ResponseMetaHeader) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Verification info for the request signed by all intermediate nodes.
type RequestVerificationHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request Body signature. Should be generated once by the request initiator.
	BodySignature *refs.Signature `protobuf:"bytes,1,opt,name=body_signature,json=bodySignature,proto3" json:"body_signature,omitempty"`
	// Request Meta signature is added and signed by each intermediate node
	MetaSignature *refs.Signature `protobuf:"bytes,2,opt,name=meta_signature,json=metaSignature,proto3" json:"meta_signature,omitempty"`
	// Signature of previous hops
	OriginSignature *refs.Signature `protobuf:"bytes,3,opt,name=origin_signature,json=originSignature,proto3" json:"origin_signature,omitempty"`
	// Chain of previous hops signatures
	Origin        *RequestVerificationHeader `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVerificationHeader) Reset() {
	*x = RequestVerificationHeader{}
	mi := &file_proto_session_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVerificationHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVerificationHeader) ProtoMessage() {}

func (x *RequestVerificationHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVerificationHeader.ProtoReflect.Descriptor instead.
func (*RequestVerificationHeader) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{6}
}

func (x *RequestVerificationHeader) GetBodySignature() *refs.Signature {
	if x != nil {
		return x.BodySignature
	}
	return nil
}

func (x *RequestVerificationHeader) GetMetaSignature() *refs.Signature {
	if x != nil {
		return x.MetaSignature
	}
	return nil
}

func (x *RequestVerificationHeader) GetOriginSignature() *refs.Signature {
	if x != nil {
		return x.OriginSignature
	}
	return nil
}

func (x *RequestVerificationHeader) GetOrigin() *RequestVerificationHeader {
	if x != nil {
		return x.Origin
	}
	return nil
}

// Verification info for the response signed by all intermediate nodes
type ResponseVerificationHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Response Body signature. Should be generated once by an answering node.
	BodySignature *refs.Signature `protobuf:"bytes,1,opt,name=body_signature,json=bodySignature,proto3" json:"body_signature,omitempty"`
	// Response Meta signature is added and signed by each intermediate node
	MetaSignature *refs.Signature `protobuf:"bytes,2,opt,name=meta_signature,json=metaSignature,proto3" json:"meta_signature,omitempty"`
	// Signature of previous hops
	OriginSignature *refs.Signature `protobuf:"bytes,3,opt,name=origin_signature,json=originSignature,proto3" json:"origin_signature,omitempty"`
	// Chain of previous hops signatures
	Origin        *ResponseVerificationHeader `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseVerificationHeader) Reset() {
	*x = ResponseVerificationHeader{}
	mi := &file_proto_session_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseVerificationHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVerificationHeader) ProtoMessage() {}

func (x *ResponseVerificationHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVerificationHeader.ProtoReflect.Descriptor instead.
func (*ResponseVerificationHeader) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseVerificationHeader) GetBodySignature() *refs.Signature {
	if x != nil {
		return x.BodySignature
	}
	return nil
}

func (x *ResponseVerificationHeader) GetMetaSignature() *refs.Signature {
	if x != nil {
		return x.MetaSignature
	}
	return nil
}

func (x *ResponseVerificationHeader) GetOriginSignature() *refs.Signature {
	if x != nil {
		return x.OriginSignature
	}
	return nil
}

func (x *ResponseVerificationHeader) GetOrigin() *ResponseVerificationHeader {
	if x != nil {
		return x.Origin
	}
	return nil
}

// Carries objects involved in the object session.
type ObjectSessionContext_Target struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates which container the session is spread to. Field MUST be set
	// and correct.
	Container *refs.ContainerID `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// Indicates which objects the session is spread to. Objects are expected
	// to be stored in the NeoFS container referenced by `container` field.
	// Each element MUST have correct format.
	Objects       []*refs.ObjectID `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectSessionContext_Target) Reset() {
	*x = ObjectSessionContext_Target{}
	mi := &file_proto_session_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectSessionContext_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSessionContext_Target) ProtoMessage() {}

func (x *ObjectSessionContext_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSessionContext_Target.ProtoReflect.Descriptor instead.
func (*ObjectSessionContext_Target) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ObjectSessionContext_Target) GetContainer() *refs.ContainerID {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ObjectSessionContext_Target) GetObjects() []*refs.ObjectID {
	if x != nil {
		return x.Objects
	}
	return nil
}

// Session Token body
type SessionToken_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Token identifier is a valid UUIDv4 in binary form
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of the session initiator
	OwnerId *refs.OwnerID `protobuf:"bytes,2,opt,name=owner_id,json=ownerID,proto3" json:"owner_id,omitempty"`
	// Lifetime of the session
	Lifetime *SessionToken_Body_TokenLifetime `protobuf:"bytes,3,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// Public key used in session
	SessionKey []byte `protobuf:"bytes,4,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	// Session Context information
	//
	// Types that are valid to be assigned to Context:
	//
	//	*SessionToken_Body_Object
	//	*SessionToken_Body_Container
	Context       isSessionToken_Body_Context `protobuf_oneof:"context"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionToken_Body) Reset() {
	*x = SessionToken_Body{}
	mi := &file_proto_session_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionToken_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken_Body) ProtoMessage() {}

func (x *SessionToken_Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken_Body.ProtoReflect.Descriptor instead.
func (*SessionToken_Body) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SessionToken_Body) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SessionToken_Body) GetOwnerId() *refs.OwnerID {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *SessionToken_Body) GetLifetime() *SessionToken_Body_TokenLifetime {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *SessionToken_Body) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *SessionToken_Body) GetContext() isSessionToken_Body_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SessionToken_Body) GetObject() *ObjectSessionContext {
	if x != nil {
		if x, ok := x.Context.(*SessionToken_Body_Object); ok {
			return x.Object
		}
	}
	return nil
}

func (x *SessionToken_Body) GetContainer() *ContainerSessionContext {
	if x != nil {
		if x, ok := x.Context.(*SessionToken_Body_Container); ok {
			return x.Container
		}
	}
	return nil
}

type isSessionToken_Body_Context interface {
	isSessionToken_Body_Context()
}

type SessionToken_Body_Object struct {
	// ObjectService session context
	Object *ObjectSessionContext `protobuf:"bytes,5,opt,name=object,proto3,oneof"`
}

type SessionToken_Body_Container struct {
	// ContainerService session context
	Container *ContainerSessionContext `protobuf:"bytes,6,opt,name=container,proto3,oneof"`
}

func (*SessionToken_Body_Object) isSessionToken_Body_Context() {}

func (*SessionToken_Body_Container) isSessionToken_Body_Context() {}

// Lifetime parameters of the token. Field names taken from rfc7519.
type SessionToken_Body_TokenLifetime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Expiration epoch, the last epoch when token is valid.
	Exp uint64 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	// Not valid before epoch, the first epoch when token is valid.
	Nbf uint64 `protobuf:"varint,2,opt,name=nbf,proto3" json:"nbf,omitempty"`
	// Issued at Epoch
	Iat           uint64 `protobuf:"varint,3,opt,name=iat,proto3" json:"iat,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionToken_Body_TokenLifetime) Reset() {
	*x = SessionToken_Body_TokenLifetime{}
	mi := &file_proto_session_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionToken_Body_TokenLifetime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken_Body_TokenLifetime) ProtoMessage() {}

func (x *SessionToken_Body_TokenLifetime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_session_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken_Body_TokenLifetime.ProtoReflect.Descriptor instead.
func (*SessionToken_Body_TokenLifetime) Descriptor() ([]byte, []int) {
	return file_proto_session_types_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *SessionToken_Body_TokenLifetime) GetExp() uint64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *SessionToken_Body_TokenLifetime) GetNbf() uint64 {
	if x != nil {
		return x.Nbf
	}
	return 0
}

func (x *SessionToken_Body_TokenLifetime) GetIat() uint64 {
	if x != nil {
		return x.Iat
	}
	return 0
}

var File_proto_session_types_proto protoreflect.FileDescriptor

const file_proto_session_types_proto_rawDesc = "" +
	"\n" +
	"\x19proto/session/types.proto\x12\x11neo.fs.v2.session\x1a\x15proto/acl/types.proto\x1a\x16proto/refs/types.proto\x1a\x18proto/status/types.proto\"\x85\x03\n" +
	"\x14ObjectSessionContext\x12@\n" +
	"\x04verb\x18\x01 \x01(\x0e2,.neo.fs.v2.session.ObjectSessionContext.VerbR\x04verb\x12F\n" +
	"\x06target\x18\x02 \x01(\v2..neo.fs.v2.session.ObjectSessionContext.TargetR\x06target\x1aw\n" +
	"\x06Target\x129\n" +
	"\tcontainer\x18\x01 \x01(\v2\x1b.neo.fs.v2.refs.ContainerIDR\tcontainer\x122\n" +
	"\aobjects\x18\x02 \x03(\v2\x18.neo.fs.v2.refs.ObjectIDR\aobjects\"j\n" +
	"\x04Verb\x12\x14\n" +
	"\x10VERB_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03PUT\x10\x01\x12\a\n" +
	"\x03GET\x10\x02\x12\b\n" +
	"\x04HEAD\x10\x03\x12\n" +
	"\n" +
	"\x06SEARCH\x10\x04\x12\n" +
	"\n" +
	"\x06DELETE\x10\x05\x12\t\n" +
	"\x05RANGE\x10\x06\x12\r\n" +
	"\tRANGEHASH\x10\a\"\xfa\x01\n" +
	"\x17ContainerSessionContext\x12C\n" +
	"\x04verb\x18\x01 \x01(\x0e2/.neo.fs.v2.session.ContainerSessionContext.VerbR\x04verb\x12\x1a\n" +
	"\bwildcard\x18\x02 \x01(\bR\bwildcard\x12>\n" +
	"\fcontainer_id\x18\x03 \x01(\v2\x1b.neo.fs.v2.refs.ContainerIDR\vcontainerID\">\n" +
	"\x04Verb\x12\x14\n" +
	"\x10VERB_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03PUT\x10\x01\x12\n" +
	"\n" +
	"\x06DELETE\x10\x02\x12\v\n" +
	"\aSETEACL\x10\x03\"\xa0\x04\n" +
	"\fSessionToken\x128\n" +
	"\x04body\x18\x01 \x01(\v2$.neo.fs.v2.session.SessionToken.BodyR\x04body\x127\n" +
	"\tsignature\x18\x02 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\tsignature\x1a\x9c\x03\n" +
	"\x04Body\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x122\n" +
	"\bowner_id\x18\x02 \x01(\v2\x17.neo.fs.v2.refs.OwnerIDR\aownerID\x12N\n" +
	"\blifetime\x18\x03 \x01(\v22.neo.fs.v2.session.SessionToken.Body.TokenLifetimeR\blifetime\x12\x1f\n" +
	"\vsession_key\x18\x04 \x01(\fR\n" +
	"sessionKey\x12A\n" +
	"\x06object\x18\x05 \x01(\v2'.neo.fs.v2.session.ObjectSessionContextH\x00R\x06object\x12J\n" +
	"\tcontainer\x18\x06 \x01(\v2*.neo.fs.v2.session.ContainerSessionContextH\x00R\tcontainer\x1aE\n" +
	"\rTokenLifetime\x12\x10\n" +
	"\x03exp\x18\x01 \x01(\x04R\x03exp\x12\x10\n" +
	"\x03nbf\x18\x02 \x01(\x04R\x03nbf\x12\x10\n" +
	"\x03iat\x18\x03 \x01(\x04R\x03iatB\t\n" +
	"\acontext\"1\n" +
	"\aXHeader\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x8d\x03\n" +
	"\x11RequestMetaHeader\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x12\x14\n" +
	"\x05epoch\x18\x02 \x01(\x04R\x05epoch\x12\x10\n" +
	"\x03ttl\x18\x03 \x01(\rR\x03ttl\x127\n" +
	"\tx_headers\x18\x04 \x03(\v2\x1a.neo.fs.v2.session.XHeaderR\bxHeaders\x12D\n" +
	"\rsession_token\x18\x05 \x01(\v2\x1f.neo.fs.v2.session.SessionTokenR\fsessionToken\x12=\n" +
	"\fbearer_token\x18\x06 \x01(\v2\x1a.neo.fs.v2.acl.BearerTokenR\vbearerToken\x12<\n" +
	"\x06origin\x18\a \x01(\v2$.neo.fs.v2.session.RequestMetaHeaderR\x06origin\x12!\n" +
	"\fmagic_number\x18\b \x01(\x04R\vmagicNumber\"\x99\x02\n" +
	"\x12ResponseMetaHeader\x121\n" +
	"\aversion\x18\x01 \x01(\v2\x17.neo.fs.v2.refs.VersionR\aversion\x12\x14\n" +
	"\x05epoch\x18\x02 \x01(\x04R\x05epoch\x12\x10\n" +
	"\x03ttl\x18\x03 \x01(\rR\x03ttl\x127\n" +
	"\tx_headers\x18\x04 \x03(\v2\x1a.neo.fs.v2.session.XHeaderR\bxHeaders\x12=\n" +
	"\x06origin\x18\x05 \x01(\v2%.neo.fs.v2.session.ResponseMetaHeaderR\x06origin\x120\n" +
	"\x06status\x18\x06 \x01(\v2\x18.neo.fs.v2.status.StatusR\x06status\"\xab\x02\n" +
	"\x19RequestVerificationHeader\x12@\n" +
	"\x0ebody_signature\x18\x01 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\rbodySignature\x12@\n" +
	"\x0emeta_signature\x18\x02 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\rmetaSignature\x12D\n" +
	"\x10origin_signature\x18\x03 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\x0foriginSignature\x12D\n" +
	"\x06origin\x18\x04 \x01(\v2,.neo.fs.v2.session.RequestVerificationHeaderR\x06origin\"\xad\x02\n" +
	"\x1aResponseVerificationHeader\x12@\n" +
	"\x0ebody_signature\x18\x01 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\rbodySignature\x12@\n" +
	"\x0emeta_signature\x18\x02 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\rmetaSignature\x12D\n" +
	"\x10origin_signature\x18\x03 \x01(\v2\x19.neo.fs.v2.refs.SignatureR\x0foriginSignature\x12E\n" +
	"\x06origin\x18\x04 \x01(\v2-.neo.fs.v2.session.ResponseVerificationHeaderR\x06originBOZ/github.com/nspcc-dev/neofs-sdk-go/proto/session\xaa\x02\x1bNeo.FileStorage.API.Sessionb\x06proto3"

var (
	file_proto_session_types_proto_rawDescOnce sync.Once
	file_proto_session_types_proto_rawDescData []byte
)

func file_proto_session_types_proto_rawDescGZIP() []byte {
	file_proto_session_types_proto_rawDescOnce.Do(func() {
		file_proto_session_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_session_types_proto_rawDesc), len(file_proto_session_types_proto_rawDesc)))
	})
	return file_proto_session_types_proto_rawDescData
}

var file_proto_session_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_session_types_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_session_types_proto_goTypes = []any{
	(ObjectSessionContext_Verb)(0),          // 0: neo.fs.v2.session.ObjectSessionContext.Verb
	(ContainerSessionContext_Verb)(0),       // 1: neo.fs.v2.session.ContainerSessionContext.Verb
	(*ObjectSessionContext)(nil),            // 2: neo.fs.v2.session.ObjectSessionContext
	(*ContainerSessionContext)(nil),         // 3: neo.fs.v2.session.ContainerSessionContext
	(*SessionToken)(nil),                    // 4: neo.fs.v2.session.SessionToken
	(*XHeader)(nil),                         // 5: neo.fs.v2.session.XHeader
	(*RequestMetaHeader)(nil),               // 6: neo.fs.v2.session.RequestMetaHeader
	(*ResponseMetaHeader)(nil),              // 7: neo.fs.v2.session.ResponseMetaHeader
	(*RequestVerificationHeader)(nil),       // 8: neo.fs.v2.session.RequestVerificationHeader
	(*ResponseVerificationHeader)(nil),      // 9: neo.fs.v2.session.ResponseVerificationHeader
	(*ObjectSessionContext_Target)(nil),     // 10: neo.fs.v2.session.ObjectSessionContext.Target
	(*SessionToken_Body)(nil),               // 11: neo.fs.v2.session.SessionToken.Body
	(*SessionToken_Body_TokenLifetime)(nil), // 12: neo.fs.v2.session.SessionToken.Body.TokenLifetime
	(*refs.ContainerID)(nil),                // 13: neo.fs.v2.refs.ContainerID
	(*refs.Signature)(nil),                  // 14: neo.fs.v2.refs.Signature
	(*refs.Version)(nil),                    // 15: neo.fs.v2.refs.Version
	(*acl.BearerToken)(nil),                 // 16: neo.fs.v2.acl.BearerToken
	(*status.Status)(nil),                   // 17: neo.fs.v2.status.Status
	(*refs.ObjectID)(nil),                   // 18: neo.fs.v2.refs.ObjectID
	(*refs.OwnerID)(nil),                    // 19: neo.fs.v2.refs.OwnerID
}
var file_proto_session_types_proto_depIdxs = []int32{
	0,  // 0: neo.fs.v2.session.ObjectSessionContext.verb:type_name -> neo.fs.v2.session.ObjectSessionContext.Verb
	10, // 1: neo.fs.v2.session.ObjectSessionContext.target:type_name -> neo.fs.v2.session.ObjectSessionContext.Target
	1,  // 2: neo.fs.v2.session.ContainerSessionContext.verb:type_name -> neo.fs.v2.session.ContainerSessionContext.Verb
	13, // 3: neo.fs.v2.session.ContainerSessionContext.container_id:type_name -> neo.fs.v2.refs.ContainerID
	11, // 4: neo.fs.v2.session.SessionToken.body:type_name -> neo.fs.v2.session.SessionToken.Body
	14, // 5: neo.fs.v2.session.SessionToken.signature:type_name -> neo.fs.v2.refs.Signature
	15, // 6: neo.fs.v2.session.RequestMetaHeader.version:type_name -> neo.fs.v2.refs.Version
	5,  // 7: neo.fs.v2.session.RequestMetaHeader.x_headers:type_name -> neo.fs.v2.session.XHeader
	4,  // 8: neo.fs.v2.session.RequestMetaHeader.session_token:type_name -> neo.fs.v2.session.SessionToken
	16, // 9: neo.fs.v2.session.RequestMetaHeader.bearer_token:type_name -> neo.fs.v2.acl.BearerToken
	6,  // 10: neo.fs.v2.session.RequestMetaHeader.origin:type_name -> neo.fs.v2.session.RequestMetaHeader
	15, // 11: neo.fs.v2.session.ResponseMetaHeader.version:type_name -> neo.fs.v2.refs.Version
	5,  // 12: neo.fs.v2.session.ResponseMetaHeader.x_headers:type_name -> neo.fs.v2.session.XHeader
	7,  // 13: neo.fs.v2.session.ResponseMetaHeader.origin:type_name -> neo.fs.v2.session.ResponseMetaHeader
	17, // 14: neo.fs.v2.session.ResponseMetaHeader.status:type_name -> neo.fs.v2.status.Status
	14, // 15: neo.fs.v2.session.RequestVerificationHeader.body_signature:type_name -> neo.fs.v2.refs.Signature
	14, // 16: neo.fs.v2.session.RequestVerificationHeader.meta_signature:type_name -> neo.fs.v2.refs.Signature
	14, // 17: neo.fs.v2.session.RequestVerificationHeader.origin_signature:type_name -> neo.fs.v2.refs.Signature
	8,  // 18: neo.fs.v2.session.RequestVerificationHeader.origin:type_name -> neo.fs.v2.session.RequestVerificationHeader
	14, // 19: neo.fs.v2.session.ResponseVerificationHeader.body_signature:type_name -> neo.fs.v2.refs.Signature
	14, // 20: neo.fs.v2.session.ResponseVerificationHeader.meta_signature:type_name -> neo.fs.v2.refs.Signature
	14, // 21: neo.fs.v2.session.ResponseVerificationHeader.origin_signature:type_name -> neo.fs.v2.refs.Signature
	9,  // 22: neo.fs.v2.session.ResponseVerificationHeader.origin:type_name -> neo.fs.v2.session.ResponseVerificationHeader
	13, // 23: neo.fs.v2.session.ObjectSessionContext.Target.container:type_name -> neo.fs.v2.refs.ContainerID
	18, // 24: neo.fs.v2.session.ObjectSessionContext.Target.objects:type_name -> neo.fs.v2.refs.ObjectID
	19, // 25: neo.fs.v2.session.SessionToken.Body.owner_id:type_name -> neo.fs.v2.refs.OwnerID
	12, // 26: neo.fs.v2.session.SessionToken.Body.lifetime:type_name -> neo.fs.v2.session.SessionToken.Body.TokenLifetime
	2,  // 27: neo.fs.v2.session.SessionToken.Body.object:type_name -> neo.fs.v2.session.ObjectSessionContext
	3,  // 28: neo.fs.v2.session.SessionToken.Body.container:type_name -> neo.fs.v2.session.ContainerSessionContext
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_proto_session_types_proto_init() }
func file_proto_session_types_proto_init() {
	if File_proto_session_types_proto != nil {
		return
	}
	file_proto_session_types_proto_msgTypes[9].OneofWrappers = []any{
		(*SessionToken_Body_Object)(nil),
		(*SessionToken_Body_Container)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_session_types_proto_rawDesc), len(file_proto_session_types_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_session_types_proto_goTypes,
		DependencyIndexes: file_proto_session_types_proto_depIdxs,
		EnumInfos:         file_proto_session_types_proto_enumTypes,
		MessageInfos:      file_proto_session_types_proto_msgTypes,
	}.Build()
	File_proto_session_types_proto = out.File
	file_proto_session_types_proto_goTypes = nil
	file_proto_session_types_proto_depIdxs = nil
}
